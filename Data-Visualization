{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMqSfbzB1DsyRPUusVF0M4I",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/gist/pouyahosseinzadeh/de2294197d619f7c220a3ce85e4d5058/sep_data_collection_for_visualization.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Collecting just one sample for visualization...\n",
        "# For all NSEP, 100, 60, and 30 MeV\n"
      ],
      "metadata": {
        "id": "nlC-LvdH1CTS"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "v0KrAWsZ9Roc"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# NSEP"
      ],
      "metadata": {
        "id": "9lrLaD8s9SFF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "from pandas import read_csv\n",
        "\n"
      ],
      "metadata": {
        "id": "ToFtahit-ye5"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list = pd.read_csv(\"/content/sample_data/GSEP_List.csv\", header = 0)"
      ],
      "metadata": {
        "id": "NRqogP1r-sWI"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sep_flare_list = GSEP_list['fl_start_time']"
      ],
      "metadata": {
        "id": "X7yqn5jL-sf-"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "NSEP_list_ = pd.read_csv(\"/content/sample_data/NSEP_list_primary.csv\", header = 0)  # primary may contain sep events as well! we will remove them"
      ],
      "metadata": {
        "id": "RyqIPF2M_ueE"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "NSEP_list = pd.DataFrame({'start time': NSEP_list_['start time'].apply(lambda x: x[:-4]),\n",
        "  'flare class': NSEP_list_['flare class']\n",
        "}) # Removing .000 from NSEP_list_"
      ],
      "metadata": {
        "id": "ZTyKor63BYZL"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nsep_flare_list = NSEP_list['start time']"
      ],
      "metadata": {
        "id": "fujbfZtOEsEz"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "my_event_indices = [] # finding SEP events in NSEP_list\n",
        "for i, j in enumerate(nsep_flare_list):\n",
        "  if j in sep_flare_list.tolist():\n",
        "    my_event_indices.append(i)"
      ],
      "metadata": {
        "id": "y9lQJs_k_-az"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "NSEP_list = NSEP_list.drop(my_event_indices)  # removing sep events from our NSEP list to get our final NSEP list"
      ],
      "metadata": {
        "id": "m0zz_x9rFhV_"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "NSEP_list.to_csv('NSEP_list.csv')"
      ],
      "metadata": {
        "id": "19pHwxJ6JrWt"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "######################################################"
      ],
      "metadata": {
        "id": "SEp5NRkcJwxl"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Reading the saved list\n",
        "NSEP_list = pd.read_csv('/content/NSEP_list.csv', index_col=0)\n",
        "# we can also remove some of these flare event data later to have a balanced list with the SEP list :)"
      ],
      "metadata": {
        "id": "iqXmpuSTJws7"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "NSEP_list = NSEP_list.reset_index(drop=True)"
      ],
      "metadata": {
        "id": "9UAFFGNDJwra"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "NSEP_list # this is our clean NSEP list"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "55b2CR2tE6pv",
        "outputId": "023f50bb-eab8-4e6b-c410-71b8511688c6"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               start time flare class\n",
              "0     1986-02-04 10:27:00        M6.4\n",
              "1     1986-10-19 00:15:00        M4.7\n",
              "2     1987-07-24 09:53:00        M3.0\n",
              "3     1987-11-05 04:56:00        M3.1\n",
              "4     1987-11-21 17:55:00        M3.5\n",
              "...                   ...         ...\n",
              "1261  2017-09-07 10:11:00        M7.3\n",
              "1262  2017-09-07 14:20:00        X1.3\n",
              "1263  2017-09-07 23:50:00        M3.9\n",
              "1264  2017-09-08 07:40:00        M8.1\n",
              "1265  2017-09-09 10:50:00        M3.7\n",
              "\n",
              "[1266 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-605e1426-4979-4677-9569-e99025e1e557\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>start time</th>\n",
              "      <th>flare class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1986-02-04 10:27:00</td>\n",
              "      <td>M6.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1986-10-19 00:15:00</td>\n",
              "      <td>M4.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1987-07-24 09:53:00</td>\n",
              "      <td>M3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1987-11-05 04:56:00</td>\n",
              "      <td>M3.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1987-11-21 17:55:00</td>\n",
              "      <td>M3.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1261</th>\n",
              "      <td>2017-09-07 10:11:00</td>\n",
              "      <td>M7.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1262</th>\n",
              "      <td>2017-09-07 14:20:00</td>\n",
              "      <td>X1.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1263</th>\n",
              "      <td>2017-09-07 23:50:00</td>\n",
              "      <td>M3.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1264</th>\n",
              "      <td>2017-09-08 07:40:00</td>\n",
              "      <td>M8.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1265</th>\n",
              "      <td>2017-09-09 10:50:00</td>\n",
              "      <td>M3.7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1266 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-605e1426-4979-4677-9569-e99025e1e557')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-605e1426-4979-4677-9569-e99025e1e557 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-605e1426-4979-4677-9569-e99025e1e557');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# NSEP_list = NSEP_list.iloc[3:1077]  # UNCOMMENT THIS FOR PROBLEMS AFTER 2011 .... HERE"
      ],
      "metadata": {
        "id": "lmequTJFoHGf"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "NSEP_list"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "Wua0Q7pSocZj",
        "outputId": "921814ef-c7d9-43a2-ef87-db09a94376a6"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               start time flare class\n",
              "0     1986-02-04 10:27:00        M6.4\n",
              "1     1986-10-19 00:15:00        M4.7\n",
              "2     1987-07-24 09:53:00        M3.0\n",
              "3     1987-11-05 04:56:00        M3.1\n",
              "4     1987-11-21 17:55:00        M3.5\n",
              "...                   ...         ...\n",
              "1261  2017-09-07 10:11:00        M7.3\n",
              "1262  2017-09-07 14:20:00        X1.3\n",
              "1263  2017-09-07 23:50:00        M3.9\n",
              "1264  2017-09-08 07:40:00        M8.1\n",
              "1265  2017-09-09 10:50:00        M3.7\n",
              "\n",
              "[1266 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9502af5b-30e4-4a07-a763-db17a54b91de\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>start time</th>\n",
              "      <th>flare class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1986-02-04 10:27:00</td>\n",
              "      <td>M6.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1986-10-19 00:15:00</td>\n",
              "      <td>M4.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1987-07-24 09:53:00</td>\n",
              "      <td>M3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1987-11-05 04:56:00</td>\n",
              "      <td>M3.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1987-11-21 17:55:00</td>\n",
              "      <td>M3.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1261</th>\n",
              "      <td>2017-09-07 10:11:00</td>\n",
              "      <td>M7.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1262</th>\n",
              "      <td>2017-09-07 14:20:00</td>\n",
              "      <td>X1.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1263</th>\n",
              "      <td>2017-09-07 23:50:00</td>\n",
              "      <td>M3.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1264</th>\n",
              "      <td>2017-09-08 07:40:00</td>\n",
              "      <td>M8.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1265</th>\n",
              "      <td>2017-09-09 10:50:00</td>\n",
              "      <td>M3.7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1266 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9502af5b-30e4-4a07-a763-db17a54b91de')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9502af5b-30e4-4a07-a763-db17a54b91de button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9502af5b-30e4-4a07-a763-db17a54b91de');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "NSEP_list.iloc[1120]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "igJaz7eJC9I0",
        "outputId": "d3ff627c-7ff8-4f13-b91c-6793653eec90"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "start time     2012-08-18 00:24:00\n",
              "flare class                   M5.5\n",
              "Name: 1120, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = NSEP_list.iloc[1120]['start time']\n",
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "6e3585ae-f90c-4454-fb5f-a5ad58671457",
        "id": "DIANptpK_V5h"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2012-08-18 00:24:00'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def convertStr(s):\n",
        "  my_x = s[-4]\n",
        "  if(int(my_x)<5):\n",
        "     return s[:-4] + '0' + ':00'\n",
        "  else:\n",
        "     return s[:-4] + '5' + ':00'\n"
      ],
      "metadata": {
        "id": "Lc-NpJ5RD_W0"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list_all = []\n",
        "\n",
        "rounded = convertStr(x)\n",
        "GSEP_list_all.append(rounded)\n"
      ],
      "metadata": {
        "id": "dvtyLtvuD_W1"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list_all"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "McqrUz3kEBPI",
        "outputId": "217c1625-3cc3-4315-f09f-2ea8ce8bd819"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['2012-08-18 00:20:00']"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import re\n",
        "\n",
        "my_dates_sep2 = []\n",
        "my_links_sep2 = []\n",
        "for i in GSEP_list_all: # because we will have inconsistent column names after the year 2011. We will not consider them.\n",
        "  \n",
        "  my_link1 = 'https://www.ncei.noaa.gov/data/goes-space-environment-monitor/access/avg/' + i[0:4] + '/' + i[5:7] + '/'\n",
        "  \n",
        "  page1 = requests.get(my_link1)\n",
        "  bs1 = BeautifulSoup(page1.content, features='lxml')\n",
        "\n",
        "  my_string1 = []\n",
        "  for l in bs1.findAll('a', attrs={'href': re.compile(\"^g\")}):\n",
        "    my_list1 = l.get('href')\n",
        "    my_string1.append(my_list1)\n",
        "\n",
        "  my_link = my_link1 + my_string1[0] + 'csv/'    # only considering the first goes. eg.: selecting goes06/ in goes06/ and goes07/\n",
        "\n",
        "  page = requests.get(my_link)\n",
        "  bs = BeautifulSoup(page.content, features='lxml')\n",
        "  my_string = []\n",
        "  for k in bs.findAll('a', attrs={'href': re.compile(\"^g\")}):\n",
        "    my_list = k.get('href')\n",
        "    my_string.append(my_list)\n",
        "  # print(my_string[0]) # only considering g05_eps_5m_ in g05_eps_5m_ and g05_eps_5m_3s_\n",
        "\n",
        "  my_sublink = []\n",
        "  for m in my_string:\n",
        "    if m[4:19] == 'epead_p17ew_5m_':  #only considering g13_epead_p17ew_5m_\n",
        "      my_sublink.append(m)\n",
        "  my_last_link = my_link + my_sublink[0] \n",
        "  # print(my_last_link)\n",
        "  my_links_sep2.append(my_last_link)\n",
        "  my_dates_sep2.append(i)\n",
        "\n",
        "print(my_links_sep2)  # uae this lst to collect the data later"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b859ef11-9492-4796-8748-470f572fb775",
        "id": "XZQvulDU_V5j"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['https://www.ncei.noaa.gov/data/goes-space-environment-monitor/access/avg/2012/08/goes13/csv/g13_epead_p17ew_5m_20120801_20120831.csv']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_df_nsep = pd.DataFrame({'Link': my_links_sep2, 'SEP Date': my_dates_sep2})\n",
        "\n",
        "my_df_nsep"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "outputId": "f8994656-2a1b-4096-bc3f-1fbb711cb651",
        "id": "e5KmMtWG_V5j"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                Link             SEP Date\n",
              "0  https://www.ncei.noaa.gov/data/goes-space-envi...  2012-08-18 00:20:00"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ed1f8ab0-d138-4333-8245-0ec9f6a285f6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Link</th>\n",
              "      <th>SEP Date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>https://www.ncei.noaa.gov/data/goes-space-envi...</td>\n",
              "      <td>2012-08-18 00:20:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ed1f8ab0-d138-4333-8245-0ec9f6a285f6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ed1f8ab0-d138-4333-8245-0ec9f6a285f6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ed1f8ab0-d138-4333-8245-0ec9f6a285f6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_df_nsep.to_csv('/content/NSEP_list.csv', index=False)"
      ],
      "metadata": {
        "id": "pACaVNTK_V5j"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "my_dates_sep2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c0a2178a-f7eb-4ae5-b9c7-d7ec0a7473bf",
        "id": "LhcEGvK4_V5j"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['2012-08-18 00:20:00']"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "all_data = []\n",
        "index = 0\n",
        "dropped_indices = []\n",
        "for r in my_links_sep2:\n",
        "\n",
        "\n",
        "\n",
        "  if my_dates_sep2[index][0:4] < '1997':  # we have different column names after this date in GOES data :\\\n",
        "\n",
        "    data = pd.read_csv(r, sep=\"\\t\", names = ['p'])\n",
        "\n",
        "    data[['time_tag','e2_flux_ic','p1_flux','p2_flux','p3_flux','p4_flux','p5_flux','p6_flux','p7_flux',\n",
        "          'a1_flux','a2_flux','a3_flux','a4_flux','a5_flux','a6_flux','p1_flux_c','p2_flux_c','p3_flux_c',\n",
        "          'p4_flux_c','p5_flux_c','p6_flux_c','p7_flux_c','p1_flux_ic','p2_flux_ic','p3_flux_ic','p4_flux_ic',\n",
        "          'p5_flux_ic','p6_flux_ic','p7_flux_ic']] = data[\"p\"].apply(lambda x: pd.Series(str(x).split(\",\")))\n",
        "\n",
        "    data = data.drop(['p'], axis = 1)\n",
        "    \n",
        "\n",
        "    start_string = my_dates_sep2[index][0:7] + '-01' + ' ' + '00:00:00.000'  # defining the data start time of the csv file\n",
        "\n",
        "    x1 = data[data['time_tag'] == start_string]\n",
        "\n",
        "    y = x1.index # first time_tag\n",
        "\n",
        "    df1 = data.iloc[y[0]:]\n",
        "\n",
        "    df1 = df1.reset_index(drop = True)\n",
        "\n",
        "    flare_string = my_dates_sep2[index] + '.000'\n",
        "    p = df1[df1['time_tag'] == flare_string] # flare stert time. .. \n",
        "    q = p.index\n",
        "    #q[0] # flare start time index\n",
        "\n",
        "\n",
        "    span = 60                        # SPAN ... 60 --- observation window is 5 hours (60 values) before the flare start time!!!!!\n",
        "    df2 = df1.iloc[q[0]-span: q[0]]\n",
        "\n",
        "    if q[0]-y[0] < span:  # if the flare start time plus span is greater than the length of the csv file, drop the data\n",
        "      u = 5 # do nothing! or break!\n",
        "      dropped_indices.append(index)  \n",
        "    elif '-99999.0' in df2['p4_flux'].tolist() or '-99999.0' in df2['p5_flux'].tolist() or '-99999.0' in df2['p6_flux'].tolist(): # if there is missing value in selected data of span window of size span, drop the data\n",
        "      u = 5 # do nothing! or break!  \n",
        "      dropped_indices.append(index)  \n",
        "    else:\n",
        "      my_temp = df2['p6_flux'].append(df2['p5_flux'])\n",
        "      yyy = my_temp.append(df2['p4_flux'])\n",
        "      all_data.append(yyy)\n",
        "\n",
        "    index += 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "  elif my_dates_sep2[index][0:4] >= '1997' and my_dates_sep2[index][0:4] < '2011' :\n",
        "\n",
        "    data = pd.read_csv(r, sep=\"\\t\", names = ['p'])\n",
        "\n",
        "    data[['time_tag','e1_flux_ic','e2_flux_ic','e3_flux_ic','p1_flux','p2_flux','p3_flux','p4_flux','p5_flux',\n",
        "          'p6_flux','p7_flux','a1_flux','a2_flux','a3_flux','a4_flux','a5_flux','a6_flux','p1_flux_c','p2_flux_c',\n",
        "          'p3_flux_c','p4_flux_c','p5_flux_c','p6_flux_c','p7_flux_c','p1_flux_ic','p2_flux_ic','p3_flux_ic',\n",
        "          'p4_flux_ic','p5_flux_ic','p6_flux_ic','p7_flux_ic']] = data[\"p\"].apply(lambda x: pd.Series(str(x).split(\",\")))\n",
        "\n",
        "\n",
        "    data = data.drop(['p'], axis = 1)\n",
        "    \n",
        "\n",
        "    start_string = my_dates_sep2[index][0:7] + '-01' + ' ' + '00:00:00.000'  # defining the data start time of the csv file\n",
        "\n",
        "    x1 = data[data['time_tag'] == start_string]\n",
        "\n",
        "    y = x1.index # first time_tag\n",
        "\n",
        "    df1 = data.iloc[y[0]:]\n",
        "\n",
        "    df1 = df1.reset_index(drop = True)\n",
        "\n",
        "    flare_string = my_dates_sep2[index] + '.000'\n",
        "    p = df1[df1['time_tag'] == flare_string] # flare stert time. .. \n",
        "    q = p.index\n",
        "    #q[0] # flare start time index\n",
        "\n",
        "\n",
        "    span = 60                        # SPAN ... 60 --- observation window is 5 hours (60 values) before the flare start time!!!!!\n",
        "    # df2 = df1.iloc[q[0]:q[0]-span]\n",
        "    df2 = df1.iloc[q[0]-span: q[0]]\n",
        "    # if q[0]+span > len(df1):  # if the flare start time plus span is greater than the length of the csv file, drop the data\n",
        "    if q[0]-y[0] < span:  # if the flare start time minus span is less than the length of the csv file, drop the data\n",
        "      u = 5 # do nothing! or break!\n",
        "      dropped_indices.append(index)  \n",
        "    elif '-99999.0' in df2['p4_flux'].tolist() or '-99999.0' in df2['p5_flux'].tolist() or '-99999.0' in df2['p6_flux'].tolist(): # if there is missing value in selected data of span window of size span, drop the dat\n",
        "      u = 5 # do nothing! or break!  \n",
        "      dropped_indices.append(index)  \n",
        "    else:\n",
        "      my_temp = df2['p6_flux'].append(df2['p5_flux'])\n",
        "      yyy = my_temp.append(df2['p4_flux'])\n",
        "      all_data.append(yyy)\n",
        "\n",
        "    index += 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "  else:\n",
        "\n",
        "    data = pd.read_csv(r, sep=\"\\t\", names = ['p'])\n",
        "\n",
        "    data[['time_tag','P1E_NUM_PTS','P1E_QUAL_FLAG','P1E_UNCOR_FLUX','P1E_COR_FLUX','P1W_NUM_PTS','P1W_QUAL_FLAG','P1W_UNCOR_FLUX','P1W_COR_FLUX','P2E_NUM_PTS','P2E_QUAL_FLAG','P2E_UNCOR_FLUX','P2E_COR_FLUX','P2W_NUM_PTS','P2W_QUAL_FLAG','P2W_UNCOR_FLUX','P2W_COR_FLUX','P3E_NUM_PTS',\n",
        "          'P3E_QUAL_FLAG','P3E_UNCOR_FLUX','P3E_COR_FLUX','P3W_NUM_PTS','P3W_QUAL_FLAG','P3W_UNCOR_FLUX','P3W_COR_FLUX','P4E_NUM_PTS','P4E_QUAL_FLAG','P4E_UNCOR_FLUX','P4E_COR_FLUX','P4W_NUM_PTS','P4W_QUAL_FLAG','P4W_UNCOR_FLUX','P4W_COR_FLUX','P5E_NUM_PTS','P5E_QUAL_FLAG','P5E_UNCOR_FLUX',\n",
        "          'P5E_COR_FLUX','P5W_NUM_PTS','P5W_QUAL_FLAG','P5W_UNCOR_FLUX','P5W_COR_FLUX','P6E_NUM_PTS','P6E_QUAL_FLAG','P6E_UNCOR_FLUX','P6E_COR_FLUX','P6W_NUM_PTS','P6W_QUAL_FLAG','P6W_UNCOR_FLUX','P6W_COR_FLUX','P7E_NUM_PTS','P7E_QUAL_FLAG','P7E_UNCOR_FLUX','P7E_COR_FLUX','P7W_NUM_PTS',\n",
        "          'P7W_QUAL_FLAG','P7W_UNCOR_FLUX','P7W_COR_FLUX']] = data[\"p\"].apply(lambda x: pd.Series(str(x).split(\",\")))\n",
        "\n",
        "\n",
        "    data = data.drop(['p'], axis = 1)\n",
        "    \n",
        "\n",
        "    start_string = my_dates_sep2[index][0:7] + '-01' + ' ' + '00:00:00.000'  # defining the data start time of the csv file\n",
        "\n",
        "    x1 = data[data['time_tag'] == start_string]\n",
        "\n",
        "    y = x1.index # first time_tag\n",
        "\n",
        "    df1 = data.iloc[y[0]:]\n",
        "\n",
        "    df1 = df1.reset_index(drop = True)\n",
        "\n",
        "    flare_string = my_dates_sep2[index] + '.000'\n",
        "    p = df1[df1['time_tag'] == flare_string] # flare stert time. .. \n",
        "    q = p.index\n",
        "    #q[0] # flare start time index\n",
        "\n",
        "\n",
        "    span = 60                        # SPAN ... 60 --- observation window is 5 hours (60 values) before the flare start time!!!!!\n",
        "    # df2 = df1.iloc[q[0]:q[0]-span]\n",
        "    df2 = df1.iloc[q[0]-span: q[0]]\n",
        "    # if q[0]+span > len(df1):  # if the flare start time plus span is greater than the length of the csv file, drop the data\n",
        "    if q[0]-y[0] < span:  # if the flare start time minus span is less than the length of the csv file, drop the data\n",
        "      u = 5 # do nothing! or break!\n",
        "      dropped_indices.append(index)  \n",
        "    elif '-99999.0' in df2['P4W_UNCOR_FLUX'].tolist() or '-99999.0' in df2['P5W_UNCOR_FLUX'].tolist() or '-99999.0' in df2['P6W_UNCOR_FLUX'].tolist(): # if there is missing value in selected data of span window of size span, drop the dat\n",
        "      u = 5 # do nothing! or break!  \n",
        "      dropped_indices.append(index)  \n",
        "    else:\n",
        "      my_temp = df2['P6W_UNCOR_FLUX'].append(df2['P5W_UNCOR_FLUX'])\n",
        "      yyy = my_temp.append(df2['P4W_UNCOR_FLUX'])\n",
        "      all_data.append(yyy)\n",
        "\n",
        "    index += 1\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "33e35cb5-612a-464c-c6ff-d0a1093c9781",
        "id": "M_xBAj2p_V5j"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-26-a473a5b3c43e>:144: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  my_temp = df2['P6W_UNCOR_FLUX'].append(df2['P5W_UNCOR_FLUX'])\n",
            "<ipython-input-26-a473a5b3c43e>:145: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  yyy = my_temp.append(df2['P4W_UNCOR_FLUX'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DF = pd.DataFrame()\n",
        "my = pd.Series(all_data)\n",
        "for sample,data in my.items():\n",
        "  c = data.reset_index(drop = True)\n",
        "  DF = DF.append(c,ignore_index=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "66df623b-141f-4025-f591-6c3bf2f0a923",
        "id": "7ZwgK0Ow_V5k"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-27-99feedb46e78>:5: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  DF = DF.append(c,ignore_index=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DF"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "d7bff9f6-669d-43c9-9688-8bdda4a3efca",
        "id": "GM52-jAr_V5k"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0           1           2           3           4           5    \\\n",
              "0  3.3537E-03  3.7602E-03  4.4038E-03  3.3875E-03  3.6924E-03  3.8279E-03   \n",
              "\n",
              "          6           7           8           9    ...         170  \\\n",
              "0  4.1667E-03  4.2344E-03  3.4553E-03  4.1328E-03  ...  2.4969E-02   \n",
              "\n",
              "          171         172         173         174         175         176  \\\n",
              "0  1.5770E-02  2.0369E-02  1.8398E-02  1.8398E-02  1.9055E-02  1.5112E-02   \n",
              "\n",
              "          177         178         179  \n",
              "0  1.3798E-02  1.2484E-02  1.1827E-02  \n",
              "\n",
              "[1 rows x 180 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0680d058-4e70-4a80-b8c3-f1fcd3088c16\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>170</th>\n",
              "      <th>171</th>\n",
              "      <th>172</th>\n",
              "      <th>173</th>\n",
              "      <th>174</th>\n",
              "      <th>175</th>\n",
              "      <th>176</th>\n",
              "      <th>177</th>\n",
              "      <th>178</th>\n",
              "      <th>179</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3.3537E-03</td>\n",
              "      <td>3.7602E-03</td>\n",
              "      <td>4.4038E-03</td>\n",
              "      <td>3.3875E-03</td>\n",
              "      <td>3.6924E-03</td>\n",
              "      <td>3.8279E-03</td>\n",
              "      <td>4.1667E-03</td>\n",
              "      <td>4.2344E-03</td>\n",
              "      <td>3.4553E-03</td>\n",
              "      <td>4.1328E-03</td>\n",
              "      <td>...</td>\n",
              "      <td>2.4969E-02</td>\n",
              "      <td>1.5770E-02</td>\n",
              "      <td>2.0369E-02</td>\n",
              "      <td>1.8398E-02</td>\n",
              "      <td>1.8398E-02</td>\n",
              "      <td>1.9055E-02</td>\n",
              "      <td>1.5112E-02</td>\n",
              "      <td>1.3798E-02</td>\n",
              "      <td>1.2484E-02</td>\n",
              "      <td>1.1827E-02</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows Ã— 180 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0680d058-4e70-4a80-b8c3-f1fcd3088c16')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0680d058-4e70-4a80-b8c3-f1fcd3088c16 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0680d058-4e70-4a80-b8c3-f1fcd3088c16');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DF.to_csv('/content/SEP_data_NSEP_one.csv', index=False)"
      ],
      "metadata": {
        "id": "SrDYTvSA_V5k"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "NSEP_ = pd.read_csv(\"/content/SEP_data_NSEP_one.csv\", header = 0)\n"
      ],
      "metadata": {
        "id": "6mf1_FGq_V5k"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "NSEP_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 174
        },
        "outputId": "2a8d2635-8970-4b0a-af3f-5d59210b303e",
        "id": "VPA7BiZa_V5k"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0        1         2         3         4         5         6  \\\n",
              "0  0.003354  0.00376  0.004404  0.003387  0.003692  0.003828  0.004167   \n",
              "\n",
              "          7         8         9  ...       170      171       172       173  \\\n",
              "0  0.004234  0.003455  0.004133  ...  0.024969  0.01577  0.020369  0.018398   \n",
              "\n",
              "        174       175       176       177       178       179  \n",
              "0  0.018398  0.019055  0.015112  0.013798  0.012484  0.011827  \n",
              "\n",
              "[1 rows x 180 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1797c562-a1a6-455f-bb6c-39b8df42fb1a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>170</th>\n",
              "      <th>171</th>\n",
              "      <th>172</th>\n",
              "      <th>173</th>\n",
              "      <th>174</th>\n",
              "      <th>175</th>\n",
              "      <th>176</th>\n",
              "      <th>177</th>\n",
              "      <th>178</th>\n",
              "      <th>179</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.003354</td>\n",
              "      <td>0.00376</td>\n",
              "      <td>0.004404</td>\n",
              "      <td>0.003387</td>\n",
              "      <td>0.003692</td>\n",
              "      <td>0.003828</td>\n",
              "      <td>0.004167</td>\n",
              "      <td>0.004234</td>\n",
              "      <td>0.003455</td>\n",
              "      <td>0.004133</td>\n",
              "      <td>...</td>\n",
              "      <td>0.024969</td>\n",
              "      <td>0.01577</td>\n",
              "      <td>0.020369</td>\n",
              "      <td>0.018398</td>\n",
              "      <td>0.018398</td>\n",
              "      <td>0.019055</td>\n",
              "      <td>0.015112</td>\n",
              "      <td>0.013798</td>\n",
              "      <td>0.012484</td>\n",
              "      <td>0.011827</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows Ã— 180 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1797c562-a1a6-455f-bb6c-39b8df42fb1a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1797c562-a1a6-455f-bb6c-39b8df42fb1a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1797c562-a1a6-455f-bb6c-39b8df42fb1a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "WbuB_HOt9RlA"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Og4aSj2Q9Riv"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 100 MeV"
      ],
      "metadata": {
        "id": "Xay7pGR30_VK"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "hJgXn73TjWFZ"
      },
      "outputs": [],
      "source": [
        "# Collecting just one sample for visualization..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "TsVqvPb7MHdo"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "from pandas import read_csv\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list = pd.read_csv(\"/content/sample_data/GSEP_List.csv\", header = 0)\n"
      ],
      "metadata": {
        "id": "xXbKegGZTH9i"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 696
        },
        "id": "9IUqwh4fTw5E",
        "outputId": "60c32c08-506f-457c-c704-2b1d63502471"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    sep_index  pp_index   cdaw_sep_id            timestamp  \\\n",
              "0    gsep_001  psep_012           NaN  1986-02-04 09:25:00   \n",
              "1    gsep_002  psep_013           NaN  1986-02-05 02:00:00   \n",
              "2    gsep_003  psep_014           NaN  1986-02-06 08:35:00   \n",
              "3    gsep_004  psep_015           NaN  1986-02-07 13:00:00   \n",
              "4    gsep_005  psep_016           NaN  1986-02-10 21:00:00   \n",
              "..        ...       ...           ...                  ...   \n",
              "336  gsep_337       NaN  cdaw_sep_148  2016-01-02 00:15:00   \n",
              "337  gsep_338       NaN  cdaw_sep_149  2017-07-14 04:40:00   \n",
              "338  gsep_339       NaN  cdaw_sep_150  2017-09-04 22:30:00   \n",
              "339  gsep_340       NaN  cdaw_sep_151  2017-09-06 12:35:00   \n",
              "340  gsep_341       NaN  cdaw_sep_152  2017-09-10 16:25:00   \n",
              "\n",
              "         cdaw_start_time        cdaw_max_time  cdaw_evn_max       cme_id  \\\n",
              "0                    NaN                  NaN           NaN          NaN   \n",
              "1                    NaN                  NaN           NaN          NaN   \n",
              "2                    NaN                  NaN           NaN          NaN   \n",
              "3                    NaN                  NaN           NaN          NaN   \n",
              "4                    NaN                  NaN           NaN          NaN   \n",
              "..                   ...                  ...           ...          ...   \n",
              "336  2016-01-02 00:15:00  2016-01-02 04:50:00          22.0  lasco_26928   \n",
              "337  2017-07-14 04:40:00  2017-07-14 23:20:00          22.0  lasco_28753   \n",
              "338  2017-09-04 22:30:00  2017-09-05 19:20:00         210.0  lasco_28869   \n",
              "339  2017-09-06 12:35:00  2017-09-07 23:25:00          41.0  lasco_28874   \n",
              "340  2017-09-10 16:25:00  2017-09-11 11:40:00        1490.0  lasco_28887   \n",
              "\n",
              "         cme_launch_time     cme_1st_app_time  ...   m_type2_onset_time  \\\n",
              "0                    NaN                  NaN  ...                  NaN   \n",
              "1                    NaN                  NaN  ...                  NaN   \n",
              "2                    NaN                  NaN  ...                  NaN   \n",
              "3                    NaN                  NaN  ...                  NaN   \n",
              "4                    NaN                  NaN  ...                  NaN   \n",
              "..                   ...                  ...  ...                  ...   \n",
              "336  2016-01-01 23:09:13  2016-01-01 23:24:00  ...  2016-01-01 23:21:00   \n",
              "337  2017-07-14 01:02:31  2017-07-14 01:25:00  ...                  NaN   \n",
              "338  2017-09-04 20:13:01  2017-09-04 20:36:05  ...                  NaN   \n",
              "339  2017-09-06 11:54:23  2017-09-06 12:24:00  ...  2017-09-06 12:02:00   \n",
              "340  2017-09-10 15:46:33  2017-09-10 16:00:00  ...  2017-09-10 15:53:00   \n",
              "\n",
              "     dh_type2_onset_time noaa-sep_flag Inst_category    Comments  Notes  \\\n",
              "0                    NaN             0             S         NaN    NaN   \n",
              "1                    NaN             0             S         NaN    NaN   \n",
              "2                    NaN             1             S         NaN  Spike   \n",
              "3                    NaN             0             S  Taken by 6    NaN   \n",
              "4                    NaN             0             S         NaN  Spike   \n",
              "..                   ...           ...           ...         ...    ...   \n",
              "336  2016-01-02 00:55:00             1             P         NaN    NaN   \n",
              "337                  NaN             1             P         NaN    NaN   \n",
              "338                  NaN             1             P         NaN    NaN   \n",
              "339  2017-09-06 12:05:00             1             P         NaN    NaN   \n",
              "340                  NaN             1             P         NaN    NaN   \n",
              "\n",
              "    Fe_e_p_shock_notes                gsep_notes          slice_start  \\\n",
              "0                  NaN             AR from LMSAL  1986-02-03 21:25:00   \n",
              "1                  NaN             AR from LMSAL  1986-02-04 14:00:00   \n",
              "2                  NaN             AR from LMSAL  1986-02-05 20:35:00   \n",
              "3                  NaN             AR from LMSAL  1986-02-07 01:00:00   \n",
              "4                  NaN             AR from LMSAL  1986-02-10 09:00:00   \n",
              "..                 ...                       ...                  ...   \n",
              "336                NaN                       NaN  2016-01-01 12:15:00   \n",
              "337                NaN                       NaN  2017-07-13 16:40:00   \n",
              "338                NaN                       NaN  2017-09-04 10:30:00   \n",
              "339                NaN  Data corrected for spike  2017-09-06 00:35:00   \n",
              "340                NaN                       NaN  2017-09-10 04:25:00   \n",
              "\n",
              "               slice_end  \n",
              "0    1986-02-04 17:45:00  \n",
              "1    1986-02-06 08:35:00  \n",
              "2    1986-02-07 13:25:00  \n",
              "3    1986-02-08 22:20:00  \n",
              "4    1986-02-12 06:00:00  \n",
              "..                   ...  \n",
              "336  2016-01-02 12:45:00  \n",
              "337  2017-07-16 19:40:00  \n",
              "338  2017-09-06 12:30:00  \n",
              "339  2017-09-08 14:35:00  \n",
              "340  2017-09-13 06:55:00  \n",
              "\n",
              "[341 rows x 45 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dd1fc663-8566-421d-89ed-6746ed3170ed\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sep_index</th>\n",
              "      <th>pp_index</th>\n",
              "      <th>cdaw_sep_id</th>\n",
              "      <th>timestamp</th>\n",
              "      <th>cdaw_start_time</th>\n",
              "      <th>cdaw_max_time</th>\n",
              "      <th>cdaw_evn_max</th>\n",
              "      <th>cme_id</th>\n",
              "      <th>cme_launch_time</th>\n",
              "      <th>cme_1st_app_time</th>\n",
              "      <th>...</th>\n",
              "      <th>m_type2_onset_time</th>\n",
              "      <th>dh_type2_onset_time</th>\n",
              "      <th>noaa-sep_flag</th>\n",
              "      <th>Inst_category</th>\n",
              "      <th>Comments</th>\n",
              "      <th>Notes</th>\n",
              "      <th>Fe_e_p_shock_notes</th>\n",
              "      <th>gsep_notes</th>\n",
              "      <th>slice_start</th>\n",
              "      <th>slice_end</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>gsep_001</td>\n",
              "      <td>psep_012</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-04 09:25:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-03 21:25:00</td>\n",
              "      <td>1986-02-04 17:45:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>gsep_002</td>\n",
              "      <td>psep_013</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-05 02:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-04 14:00:00</td>\n",
              "      <td>1986-02-06 08:35:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>gsep_003</td>\n",
              "      <td>psep_014</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-06 08:35:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>S</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Spike</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-05 20:35:00</td>\n",
              "      <td>1986-02-07 13:25:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>gsep_004</td>\n",
              "      <td>psep_015</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-07 13:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Taken by 6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-07 01:00:00</td>\n",
              "      <td>1986-02-08 22:20:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>gsep_005</td>\n",
              "      <td>psep_016</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-10 21:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Spike</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-10 09:00:00</td>\n",
              "      <td>1986-02-12 06:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>336</th>\n",
              "      <td>gsep_337</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_148</td>\n",
              "      <td>2016-01-02 00:15:00</td>\n",
              "      <td>2016-01-02 00:15:00</td>\n",
              "      <td>2016-01-02 04:50:00</td>\n",
              "      <td>22.0</td>\n",
              "      <td>lasco_26928</td>\n",
              "      <td>2016-01-01 23:09:13</td>\n",
              "      <td>2016-01-01 23:24:00</td>\n",
              "      <td>...</td>\n",
              "      <td>2016-01-01 23:21:00</td>\n",
              "      <td>2016-01-02 00:55:00</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016-01-01 12:15:00</td>\n",
              "      <td>2016-01-02 12:45:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>337</th>\n",
              "      <td>gsep_338</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_149</td>\n",
              "      <td>2017-07-14 04:40:00</td>\n",
              "      <td>2017-07-14 04:40:00</td>\n",
              "      <td>2017-07-14 23:20:00</td>\n",
              "      <td>22.0</td>\n",
              "      <td>lasco_28753</td>\n",
              "      <td>2017-07-14 01:02:31</td>\n",
              "      <td>2017-07-14 01:25:00</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-07-13 16:40:00</td>\n",
              "      <td>2017-07-16 19:40:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>338</th>\n",
              "      <td>gsep_339</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_150</td>\n",
              "      <td>2017-09-04 22:30:00</td>\n",
              "      <td>2017-09-04 22:30:00</td>\n",
              "      <td>2017-09-05 19:20:00</td>\n",
              "      <td>210.0</td>\n",
              "      <td>lasco_28869</td>\n",
              "      <td>2017-09-04 20:13:01</td>\n",
              "      <td>2017-09-04 20:36:05</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-09-04 10:30:00</td>\n",
              "      <td>2017-09-06 12:30:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>339</th>\n",
              "      <td>gsep_340</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_151</td>\n",
              "      <td>2017-09-06 12:35:00</td>\n",
              "      <td>2017-09-06 12:35:00</td>\n",
              "      <td>2017-09-07 23:25:00</td>\n",
              "      <td>41.0</td>\n",
              "      <td>lasco_28874</td>\n",
              "      <td>2017-09-06 11:54:23</td>\n",
              "      <td>2017-09-06 12:24:00</td>\n",
              "      <td>...</td>\n",
              "      <td>2017-09-06 12:02:00</td>\n",
              "      <td>2017-09-06 12:05:00</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Data corrected for spike</td>\n",
              "      <td>2017-09-06 00:35:00</td>\n",
              "      <td>2017-09-08 14:35:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>340</th>\n",
              "      <td>gsep_341</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_152</td>\n",
              "      <td>2017-09-10 16:25:00</td>\n",
              "      <td>2017-09-10 16:25:00</td>\n",
              "      <td>2017-09-11 11:40:00</td>\n",
              "      <td>1490.0</td>\n",
              "      <td>lasco_28887</td>\n",
              "      <td>2017-09-10 15:46:33</td>\n",
              "      <td>2017-09-10 16:00:00</td>\n",
              "      <td>...</td>\n",
              "      <td>2017-09-10 15:53:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-09-10 04:25:00</td>\n",
              "      <td>2017-09-13 06:55:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>341 rows Ã— 45 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd1fc663-8566-421d-89ed-6746ed3170ed')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dd1fc663-8566-421d-89ed-6746ed3170ed button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dd1fc663-8566-421d-89ed-6746ed3170ed');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Choose which one you wanna use...\n",
        "f = GSEP_list.iloc[312]\n",
        "f"
      ],
      "metadata": {
        "id": "7wZ8at4wE9Ox",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9e4e3aaa-0c61-4d31-f29e-f75e7c1843a3"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sep_index                         gsep_313\n",
              "pp_index                          psep_308\n",
              "cdaw_sep_id                   cdaw_sep_126\n",
              "timestamp              2012-07-19 01:25:00\n",
              "cdaw_start_time        2012-07-19 06:40:00\n",
              "cdaw_max_time          2012-07-19 14:25:00\n",
              "cdaw_evn_max                          80.0\n",
              "cme_id                         lasco_19008\n",
              "cme_launch_time        2012-07-19 05:05:59\n",
              "cme_1st_app_time       2012-07-19 05:24:00\n",
              "lasco_cme_width                        360\n",
              "p_cme_width                            360\n",
              "lasco_linear_speed                    1631\n",
              "p_cme_speed                           1931\n",
              "fl_id                         gid_sdo_2296\n",
              "fl_start_time          2012-07-19 04:17:00\n",
              "fl_peak_time           2012-07-19 05:58:00\n",
              "fl_rise_time                           101\n",
              "fl_lon                                90.0\n",
              "fl_lat                               -17.0\n",
              "fl_goes_class                         M7.7\n",
              "noaa_ar                            11520.0\n",
              "noaa_ar_uncertain                    False\n",
              "harpnum                             1834.0\n",
              "noaa_pf10MeV                          80.0\n",
              "ppf_gt10MeV                          54.92\n",
              "ppf_gt30MeV                          10.03\n",
              "ppf_gt60MeV                           1.95\n",
              "ppf_gt100MeV                          0.52\n",
              "fluence_gt10MeV                  5260000.0\n",
              "fluence_gt30MeV                   803000.0\n",
              "fluence_gt60MeV                   251000.0\n",
              "fluence_gt100MeV                  115000.0\n",
              "gsep_pf_gt10MeV                      81.44\n",
              "gsep_max_time          2012-07-20 04:50:00\n",
              "m_type2_onset_time     2012-07-19 05:24:00\n",
              "dh_type2_onset_time    2012-07-19 05:30:00\n",
              "noaa-sep_flag                            1\n",
              "Inst_category                            P\n",
              "Comments                               NaN\n",
              "Notes                                  NaN\n",
              "Fe_e_p_shock_notes      Fe-rich; ;p-rich; \n",
              "gsep_notes                             NaN\n",
              "slice_start            2012-07-18 18:40:00\n",
              "slice_end              2012-07-21 03:25:00\n",
              "Name: 312, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f['ppf_gt100MeV']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xBaUzDiMpNSl",
        "outputId": "012d92af-910c-44fb-8726-eb8e9ede154a"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.52"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f['fl_start_time']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "tSPuGc7IpOQA",
        "outputId": "d95dcb3a-54df-4ad7-eea3-5f03d980f1f8"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2012-07-19 04:17:00'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "i2NrtsN7pOOP"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = f['fl_start_time']"
      ],
      "metadata": {
        "id": "2YYWNwcaTH7w"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def convertStr(s):\n",
        "  my_x = s[-4]\n",
        "  if(int(my_x)<5):\n",
        "     return s[:-4] + '0' + ':00'\n",
        "  else:\n",
        "     return s[:-4] + '5' + ':00'\n"
      ],
      "metadata": {
        "id": "TmvKA4B7l0t9"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list_all = []\n",
        "\n",
        "rounded = convertStr(x)\n",
        "GSEP_list_all.append(rounded)\n"
      ],
      "metadata": {
        "id": "P3xksSXQqAXh"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "################################################"
      ],
      "metadata": {
        "id": "vhCrHqzajtT9"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list_all"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QrDds0nspaEX",
        "outputId": "a8f3b26d-ac58-4778-ff2a-38d678346a15"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['2012-07-19 04:15:00']"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import re\n",
        "\n",
        "my_dates_sep2 = []\n",
        "my_links_sep2 = []\n",
        "for i in GSEP_list_all: # because we will have inconsistent column names after the year 2011. We will not consider them.\n",
        "  \n",
        "  my_link1 = 'https://www.ncei.noaa.gov/data/goes-space-environment-monitor/access/avg/' + i[0:4] + '/' + i[5:7] + '/'\n",
        "  \n",
        "  page1 = requests.get(my_link1)\n",
        "  bs1 = BeautifulSoup(page1.content, features='lxml')\n",
        "\n",
        "  my_string1 = []\n",
        "  for l in bs1.findAll('a', attrs={'href': re.compile(\"^g\")}):\n",
        "    my_list1 = l.get('href')\n",
        "    my_string1.append(my_list1)\n",
        "\n",
        "  my_link = my_link1 + my_string1[0] + 'csv/'    # only considering the first goes. eg.: selecting goes06/ in goes06/ and goes07/\n",
        "\n",
        "  page = requests.get(my_link)\n",
        "  bs = BeautifulSoup(page.content, features='lxml')\n",
        "  my_string = []\n",
        "  for k in bs.findAll('a', attrs={'href': re.compile(\"^g\")}):\n",
        "    my_list = k.get('href')\n",
        "    my_string.append(my_list)\n",
        "  # print(my_string[0]) # only considering g05_eps_5m_ in g05_eps_5m_ and g05_eps_5m_3s_\n",
        "\n",
        "  my_sublink = []\n",
        "  for m in my_string:\n",
        "    if m[4:19] == 'epead_p17ew_5m_':  #only considering g13_epead_p17ew_5m_\n",
        "      my_sublink.append(m)\n",
        "  my_last_link = my_link + my_sublink[0] \n",
        "  # print(my_last_link)\n",
        "  my_links_sep2.append(my_last_link)\n",
        "  my_dates_sep2.append(i)\n",
        "\n",
        "print(my_links_sep2)  # uae this lst to collect the data later"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O1v6lRDBNLoL",
        "outputId": "a845677e-6aae-4fa0-e5a7-2386d923998e"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['https://www.ncei.noaa.gov/data/goes-space-environment-monitor/access/avg/2012/07/goes13/csv/g13_epead_p17ew_5m_20120701_20120731.csv']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_df_nsep = pd.DataFrame({'Link': my_links_sep2, 'SEP Date': my_dates_sep2})\n",
        "\n",
        "my_df_nsep"
      ],
      "metadata": {
        "id": "omyIURQUpaAu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "outputId": "2baa8bc0-7401-4bb6-c31c-82460d22e7b2"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                Link             SEP Date\n",
              "0  https://www.ncei.noaa.gov/data/goes-space-envi...  2012-07-19 04:15:00"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-da05dc2f-4ce6-44df-9005-77f86908c596\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Link</th>\n",
              "      <th>SEP Date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>https://www.ncei.noaa.gov/data/goes-space-envi...</td>\n",
              "      <td>2012-07-19 04:15:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-da05dc2f-4ce6-44df-9005-77f86908c596')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-da05dc2f-4ce6-44df-9005-77f86908c596 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-da05dc2f-4ce6-44df-9005-77f86908c596');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_df_nsep.to_csv('/content/SEP_list.csv', index=False)"
      ],
      "metadata": {
        "id": "ZJ9xIwXsKOwP"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "my_dates_sep2"
      ],
      "metadata": {
        "id": "UWn7tDxKpxMc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6df33e01-ad11-495b-cace-06b3c355f1e7"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['2012-07-19 04:15:00']"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "all_data = []\n",
        "index = 0\n",
        "dropped_indices = []\n",
        "for r in my_links_sep2:\n",
        "\n",
        "\n",
        "\n",
        "  if my_dates_sep2[index][0:4] < '1997':  # we have different column names after this date in GOES data :\\\n",
        "\n",
        "    data = pd.read_csv(r, sep=\"\\t\", names = ['p'])\n",
        "\n",
        "    data[['time_tag','e2_flux_ic','p1_flux','p2_flux','p3_flux','p4_flux','p5_flux','p6_flux','p7_flux',\n",
        "          'a1_flux','a2_flux','a3_flux','a4_flux','a5_flux','a6_flux','p1_flux_c','p2_flux_c','p3_flux_c',\n",
        "          'p4_flux_c','p5_flux_c','p6_flux_c','p7_flux_c','p1_flux_ic','p2_flux_ic','p3_flux_ic','p4_flux_ic',\n",
        "          'p5_flux_ic','p6_flux_ic','p7_flux_ic']] = data[\"p\"].apply(lambda x: pd.Series(str(x).split(\",\")))\n",
        "\n",
        "    data = data.drop(['p'], axis = 1)\n",
        "    \n",
        "\n",
        "    start_string = my_dates_sep2[index][0:7] + '-01' + ' ' + '00:00:00.000'  # defining the data start time of the csv file\n",
        "\n",
        "    x1 = data[data['time_tag'] == start_string]\n",
        "\n",
        "    y = x1.index # first time_tag\n",
        "\n",
        "    df1 = data.iloc[y[0]:]\n",
        "\n",
        "    df1 = df1.reset_index(drop = True)\n",
        "\n",
        "    flare_string = my_dates_sep2[index] + '.000'\n",
        "    p = df1[df1['time_tag'] == flare_string] # flare stert time. .. \n",
        "    q = p.index\n",
        "    #q[0] # flare start time index\n",
        "\n",
        "\n",
        "    span = 60                        # SPAN ... 60 --- observation window is 5 hours (60 values) before the flare start time!!!!!\n",
        "    df2 = df1.iloc[q[0]-span: q[0]]\n",
        "\n",
        "    if q[0]-y[0] < span:  # if the flare start time plus span is greater than the length of the csv file, drop the data\n",
        "      u = 5 # do nothing! or break!\n",
        "      dropped_indices.append(index)  \n",
        "    elif '-99999.0' in df2['p4_flux'].tolist() or '-99999.0' in df2['p5_flux'].tolist() or '-99999.0' in df2['p6_flux'].tolist(): # if there is missing value in selected data of span window of size span, drop the data\n",
        "      u = 5 # do nothing! or break!  \n",
        "      dropped_indices.append(index)  \n",
        "    else:\n",
        "      my_temp = df2['p6_flux'].append(df2['p5_flux'])\n",
        "      yyy = my_temp.append(df2['p4_flux'])\n",
        "      all_data.append(yyy)\n",
        "\n",
        "    index += 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "  elif my_dates_sep2[index][0:4] >= '1997' and my_dates_sep2[index][0:4] < '2011' :\n",
        "\n",
        "    data = pd.read_csv(r, sep=\"\\t\", names = ['p'])\n",
        "\n",
        "    data[['time_tag','e1_flux_ic','e2_flux_ic','e3_flux_ic','p1_flux','p2_flux','p3_flux','p4_flux','p5_flux',\n",
        "          'p6_flux','p7_flux','a1_flux','a2_flux','a3_flux','a4_flux','a5_flux','a6_flux','p1_flux_c','p2_flux_c',\n",
        "          'p3_flux_c','p4_flux_c','p5_flux_c','p6_flux_c','p7_flux_c','p1_flux_ic','p2_flux_ic','p3_flux_ic',\n",
        "          'p4_flux_ic','p5_flux_ic','p6_flux_ic','p7_flux_ic']] = data[\"p\"].apply(lambda x: pd.Series(str(x).split(\",\")))\n",
        "\n",
        "\n",
        "    data = data.drop(['p'], axis = 1)\n",
        "    \n",
        "\n",
        "    start_string = my_dates_sep2[index][0:7] + '-01' + ' ' + '00:00:00.000'  # defining the data start time of the csv file\n",
        "\n",
        "    x1 = data[data['time_tag'] == start_string]\n",
        "\n",
        "    y = x1.index # first time_tag\n",
        "\n",
        "    df1 = data.iloc[y[0]:]\n",
        "\n",
        "    df1 = df1.reset_index(drop = True)\n",
        "\n",
        "    flare_string = my_dates_sep2[index] + '.000'\n",
        "    p = df1[df1['time_tag'] == flare_string] # flare stert time. .. \n",
        "    q = p.index\n",
        "    #q[0] # flare start time index\n",
        "\n",
        "\n",
        "    span = 60                        # SPAN ... 60 --- observation window is 5 hours (60 values) before the flare start time!!!!!\n",
        "    # df2 = df1.iloc[q[0]:q[0]-span]\n",
        "    df2 = df1.iloc[q[0]-span: q[0]]\n",
        "    # if q[0]+span > len(df1):  # if the flare start time plus span is greater than the length of the csv file, drop the data\n",
        "    if q[0]-y[0] < span:  # if the flare start time minus span is less than the length of the csv file, drop the data\n",
        "      u = 5 # do nothing! or break!\n",
        "      dropped_indices.append(index)  \n",
        "    elif '-99999.0' in df2['p4_flux'].tolist() or '-99999.0' in df2['p5_flux'].tolist() or '-99999.0' in df2['p6_flux'].tolist(): # if there is missing value in selected data of span window of size span, drop the dat\n",
        "      u = 5 # do nothing! or break!  \n",
        "      dropped_indices.append(index)  \n",
        "    else:\n",
        "      my_temp = df2['p6_flux'].append(df2['p5_flux'])\n",
        "      yyy = my_temp.append(df2['p4_flux'])\n",
        "      all_data.append(yyy)\n",
        "\n",
        "    index += 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "  else:\n",
        "\n",
        "    data = pd.read_csv(r, sep=\"\\t\", names = ['p'])\n",
        "\n",
        "    data[['time_tag','P1E_NUM_PTS','P1E_QUAL_FLAG','P1E_UNCOR_FLUX','P1E_COR_FLUX','P1W_NUM_PTS','P1W_QUAL_FLAG','P1W_UNCOR_FLUX','P1W_COR_FLUX','P2E_NUM_PTS','P2E_QUAL_FLAG','P2E_UNCOR_FLUX','P2E_COR_FLUX','P2W_NUM_PTS','P2W_QUAL_FLAG','P2W_UNCOR_FLUX','P2W_COR_FLUX','P3E_NUM_PTS',\n",
        "          'P3E_QUAL_FLAG','P3E_UNCOR_FLUX','P3E_COR_FLUX','P3W_NUM_PTS','P3W_QUAL_FLAG','P3W_UNCOR_FLUX','P3W_COR_FLUX','P4E_NUM_PTS','P4E_QUAL_FLAG','P4E_UNCOR_FLUX','P4E_COR_FLUX','P4W_NUM_PTS','P4W_QUAL_FLAG','P4W_UNCOR_FLUX','P4W_COR_FLUX','P5E_NUM_PTS','P5E_QUAL_FLAG','P5E_UNCOR_FLUX',\n",
        "          'P5E_COR_FLUX','P5W_NUM_PTS','P5W_QUAL_FLAG','P5W_UNCOR_FLUX','P5W_COR_FLUX','P6E_NUM_PTS','P6E_QUAL_FLAG','P6E_UNCOR_FLUX','P6E_COR_FLUX','P6W_NUM_PTS','P6W_QUAL_FLAG','P6W_UNCOR_FLUX','P6W_COR_FLUX','P7E_NUM_PTS','P7E_QUAL_FLAG','P7E_UNCOR_FLUX','P7E_COR_FLUX','P7W_NUM_PTS',\n",
        "          'P7W_QUAL_FLAG','P7W_UNCOR_FLUX','P7W_COR_FLUX']] = data[\"p\"].apply(lambda x: pd.Series(str(x).split(\",\")))\n",
        "\n",
        "\n",
        "    data = data.drop(['p'], axis = 1)\n",
        "    \n",
        "\n",
        "    start_string = my_dates_sep2[index][0:7] + '-01' + ' ' + '00:00:00.000'  # defining the data start time of the csv file\n",
        "\n",
        "    x1 = data[data['time_tag'] == start_string]\n",
        "\n",
        "    y = x1.index # first time_tag\n",
        "\n",
        "    df1 = data.iloc[y[0]:]\n",
        "\n",
        "    df1 = df1.reset_index(drop = True)\n",
        "\n",
        "    flare_string = my_dates_sep2[index] + '.000'\n",
        "    p = df1[df1['time_tag'] == flare_string] # flare stert time. .. \n",
        "    q = p.index\n",
        "    #q[0] # flare start time index\n",
        "\n",
        "\n",
        "    span = 60                        # SPAN ... 60 --- observation window is 5 hours (60 values) before the flare start time!!!!!\n",
        "    # df2 = df1.iloc[q[0]:q[0]-span]\n",
        "    df2 = df1.iloc[q[0]-span: q[0]]\n",
        "    # if q[0]+span > len(df1):  # if the flare start time plus span is greater than the length of the csv file, drop the data\n",
        "    if q[0]-y[0] < span:  # if the flare start time minus span is less than the length of the csv file, drop the data\n",
        "      u = 5 # do nothing! or break!\n",
        "      dropped_indices.append(index)  \n",
        "    elif '-99999.0' in df2['P4W_UNCOR_FLUX'].tolist() or '-99999.0' in df2['P5W_UNCOR_FLUX'].tolist() or '-99999.0' in df2['P6W_UNCOR_FLUX'].tolist(): # if there is missing value in selected data of span window of size span, drop the dat\n",
        "      u = 5 # do nothing! or break!  \n",
        "      dropped_indices.append(index)  \n",
        "    else:\n",
        "      my_temp = df2['P6W_UNCOR_FLUX'].append(df2['P5W_UNCOR_FLUX'])\n",
        "      yyy = my_temp.append(df2['P4W_UNCOR_FLUX'])\n",
        "      all_data.append(yyy)\n",
        "\n",
        "    index += 1\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "qBgUSvRhq3i9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "042d6b06-7356-4d13-d65d-7d70ed8e5972"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-48-a473a5b3c43e>:144: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  my_temp = df2['P6W_UNCOR_FLUX'].append(df2['P5W_UNCOR_FLUX'])\n",
            "<ipython-input-48-a473a5b3c43e>:145: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  yyy = my_temp.append(df2['P4W_UNCOR_FLUX'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DF = pd.DataFrame()\n",
        "my = pd.Series(all_data)\n",
        "for sample,data in my.items():\n",
        "  c = data.reset_index(drop = True)\n",
        "  DF = DF.append(c,ignore_index=True)"
      ],
      "metadata": {
        "id": "jcGm-YvWYCSr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "efb16a8f-d941-4f03-807c-ee2228b999b2"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-49-99feedb46e78>:5: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  DF = DF.append(c,ignore_index=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DF"
      ],
      "metadata": {
        "id": "5VtxIXYnYTP1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "89ef3489-703d-43f1-a583-6634d91d6bee"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0           1           2           3           4           5    \\\n",
              "0  4.0989E-03  3.5569E-03  4.3360E-03  4.2005E-03  4.3360E-03  4.3022E-03   \n",
              "\n",
              "          6           7           8           9    ...         170  \\\n",
              "0  4.0650E-03  4.7087E-03  4.6070E-03  4.2005E-03  ...  1.2221E-01   \n",
              "\n",
              "          171         172         173         174         175         176  \\\n",
              "0  1.3404E-01  1.3733E-01  1.6394E-01  1.7872E-01  1.7675E-01  2.0040E-01   \n",
              "\n",
              "          177         178         179  \n",
              "0  2.2603E-01  2.2800E-01  2.6315E-01  \n",
              "\n",
              "[1 rows x 180 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-59f44651-36a1-4009-b8d4-2bafb1d5bcd1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>170</th>\n",
              "      <th>171</th>\n",
              "      <th>172</th>\n",
              "      <th>173</th>\n",
              "      <th>174</th>\n",
              "      <th>175</th>\n",
              "      <th>176</th>\n",
              "      <th>177</th>\n",
              "      <th>178</th>\n",
              "      <th>179</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4.0989E-03</td>\n",
              "      <td>3.5569E-03</td>\n",
              "      <td>4.3360E-03</td>\n",
              "      <td>4.2005E-03</td>\n",
              "      <td>4.3360E-03</td>\n",
              "      <td>4.3022E-03</td>\n",
              "      <td>4.0650E-03</td>\n",
              "      <td>4.7087E-03</td>\n",
              "      <td>4.6070E-03</td>\n",
              "      <td>4.2005E-03</td>\n",
              "      <td>...</td>\n",
              "      <td>1.2221E-01</td>\n",
              "      <td>1.3404E-01</td>\n",
              "      <td>1.3733E-01</td>\n",
              "      <td>1.6394E-01</td>\n",
              "      <td>1.7872E-01</td>\n",
              "      <td>1.7675E-01</td>\n",
              "      <td>2.0040E-01</td>\n",
              "      <td>2.2603E-01</td>\n",
              "      <td>2.2800E-01</td>\n",
              "      <td>2.6315E-01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows Ã— 180 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59f44651-36a1-4009-b8d4-2bafb1d5bcd1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-59f44651-36a1-4009-b8d4-2bafb1d5bcd1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-59f44651-36a1-4009-b8d4-2bafb1d5bcd1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DF.to_csv('/content/SEP_data_100MeV_one.csv', index=False)"
      ],
      "metadata": {
        "id": "qlOsMj6kZmdF"
      },
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a = pd.read_csv(\"/content/SEP_data_100MeV_one.csv\", header = 0)\n"
      ],
      "metadata": {
        "id": "buECX70SSA16"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a"
      ],
      "metadata": {
        "id": "ON8afgxYul3D",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 174
        },
        "outputId": "a4e96626-f39e-449e-ecf0-ec5b989a7cfd"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0         1         2         3         4         5         6  \\\n",
              "0  0.004099  0.003557  0.004336  0.004201  0.004336  0.004302  0.004065   \n",
              "\n",
              "          7         8         9  ...      170      171      172      173  \\\n",
              "0  0.004709  0.004607  0.004201  ...  0.12221  0.13404  0.13733  0.16394   \n",
              "\n",
              "       174      175     176      177    178      179  \n",
              "0  0.17872  0.17675  0.2004  0.22603  0.228  0.26315  \n",
              "\n",
              "[1 rows x 180 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-407e6764-9074-48f6-bb7a-b40ad09966d6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>170</th>\n",
              "      <th>171</th>\n",
              "      <th>172</th>\n",
              "      <th>173</th>\n",
              "      <th>174</th>\n",
              "      <th>175</th>\n",
              "      <th>176</th>\n",
              "      <th>177</th>\n",
              "      <th>178</th>\n",
              "      <th>179</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.004099</td>\n",
              "      <td>0.003557</td>\n",
              "      <td>0.004336</td>\n",
              "      <td>0.004201</td>\n",
              "      <td>0.004336</td>\n",
              "      <td>0.004302</td>\n",
              "      <td>0.004065</td>\n",
              "      <td>0.004709</td>\n",
              "      <td>0.004607</td>\n",
              "      <td>0.004201</td>\n",
              "      <td>...</td>\n",
              "      <td>0.12221</td>\n",
              "      <td>0.13404</td>\n",
              "      <td>0.13733</td>\n",
              "      <td>0.16394</td>\n",
              "      <td>0.17872</td>\n",
              "      <td>0.17675</td>\n",
              "      <td>0.2004</td>\n",
              "      <td>0.22603</td>\n",
              "      <td>0.228</td>\n",
              "      <td>0.26315</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows Ã— 180 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-407e6764-9074-48f6-bb7a-b40ad09966d6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-407e6764-9074-48f6-bb7a-b40ad09966d6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-407e6764-9074-48f6-bb7a-b40ad09966d6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "qtaxvPJRZ8Fi"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hrs81rYpuAqU"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jV0y6vP4uAoQ"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "K0be_GLHuAmr"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 60 MeV"
      ],
      "metadata": {
        "id": "w53Z6nULuCcs"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {
        "id": "H_u6jUcHuBGi"
      },
      "outputs": [],
      "source": [
        "# Collecting just one sample for visualization..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 55,
      "metadata": {
        "id": "wEbewteuuBGi"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "from pandas import read_csv\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list = pd.read_csv(\"/content/sample_data/GSEP_List.csv\", header = 0)\n"
      ],
      "metadata": {
        "id": "bf-26bCVuBGi"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 696
        },
        "outputId": "76e3c7d8-b4a0-4d3b-8cb3-8e89a61f5e53",
        "id": "AtsPexpRuBGj"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    sep_index  pp_index   cdaw_sep_id            timestamp  \\\n",
              "0    gsep_001  psep_012           NaN  1986-02-04 09:25:00   \n",
              "1    gsep_002  psep_013           NaN  1986-02-05 02:00:00   \n",
              "2    gsep_003  psep_014           NaN  1986-02-06 08:35:00   \n",
              "3    gsep_004  psep_015           NaN  1986-02-07 13:00:00   \n",
              "4    gsep_005  psep_016           NaN  1986-02-10 21:00:00   \n",
              "..        ...       ...           ...                  ...   \n",
              "336  gsep_337       NaN  cdaw_sep_148  2016-01-02 00:15:00   \n",
              "337  gsep_338       NaN  cdaw_sep_149  2017-07-14 04:40:00   \n",
              "338  gsep_339       NaN  cdaw_sep_150  2017-09-04 22:30:00   \n",
              "339  gsep_340       NaN  cdaw_sep_151  2017-09-06 12:35:00   \n",
              "340  gsep_341       NaN  cdaw_sep_152  2017-09-10 16:25:00   \n",
              "\n",
              "         cdaw_start_time        cdaw_max_time  cdaw_evn_max       cme_id  \\\n",
              "0                    NaN                  NaN           NaN          NaN   \n",
              "1                    NaN                  NaN           NaN          NaN   \n",
              "2                    NaN                  NaN           NaN          NaN   \n",
              "3                    NaN                  NaN           NaN          NaN   \n",
              "4                    NaN                  NaN           NaN          NaN   \n",
              "..                   ...                  ...           ...          ...   \n",
              "336  2016-01-02 00:15:00  2016-01-02 04:50:00          22.0  lasco_26928   \n",
              "337  2017-07-14 04:40:00  2017-07-14 23:20:00          22.0  lasco_28753   \n",
              "338  2017-09-04 22:30:00  2017-09-05 19:20:00         210.0  lasco_28869   \n",
              "339  2017-09-06 12:35:00  2017-09-07 23:25:00          41.0  lasco_28874   \n",
              "340  2017-09-10 16:25:00  2017-09-11 11:40:00        1490.0  lasco_28887   \n",
              "\n",
              "         cme_launch_time     cme_1st_app_time  ...   m_type2_onset_time  \\\n",
              "0                    NaN                  NaN  ...                  NaN   \n",
              "1                    NaN                  NaN  ...                  NaN   \n",
              "2                    NaN                  NaN  ...                  NaN   \n",
              "3                    NaN                  NaN  ...                  NaN   \n",
              "4                    NaN                  NaN  ...                  NaN   \n",
              "..                   ...                  ...  ...                  ...   \n",
              "336  2016-01-01 23:09:13  2016-01-01 23:24:00  ...  2016-01-01 23:21:00   \n",
              "337  2017-07-14 01:02:31  2017-07-14 01:25:00  ...                  NaN   \n",
              "338  2017-09-04 20:13:01  2017-09-04 20:36:05  ...                  NaN   \n",
              "339  2017-09-06 11:54:23  2017-09-06 12:24:00  ...  2017-09-06 12:02:00   \n",
              "340  2017-09-10 15:46:33  2017-09-10 16:00:00  ...  2017-09-10 15:53:00   \n",
              "\n",
              "     dh_type2_onset_time noaa-sep_flag Inst_category    Comments  Notes  \\\n",
              "0                    NaN             0             S         NaN    NaN   \n",
              "1                    NaN             0             S         NaN    NaN   \n",
              "2                    NaN             1             S         NaN  Spike   \n",
              "3                    NaN             0             S  Taken by 6    NaN   \n",
              "4                    NaN             0             S         NaN  Spike   \n",
              "..                   ...           ...           ...         ...    ...   \n",
              "336  2016-01-02 00:55:00             1             P         NaN    NaN   \n",
              "337                  NaN             1             P         NaN    NaN   \n",
              "338                  NaN             1             P         NaN    NaN   \n",
              "339  2017-09-06 12:05:00             1             P         NaN    NaN   \n",
              "340                  NaN             1             P         NaN    NaN   \n",
              "\n",
              "    Fe_e_p_shock_notes                gsep_notes          slice_start  \\\n",
              "0                  NaN             AR from LMSAL  1986-02-03 21:25:00   \n",
              "1                  NaN             AR from LMSAL  1986-02-04 14:00:00   \n",
              "2                  NaN             AR from LMSAL  1986-02-05 20:35:00   \n",
              "3                  NaN             AR from LMSAL  1986-02-07 01:00:00   \n",
              "4                  NaN             AR from LMSAL  1986-02-10 09:00:00   \n",
              "..                 ...                       ...                  ...   \n",
              "336                NaN                       NaN  2016-01-01 12:15:00   \n",
              "337                NaN                       NaN  2017-07-13 16:40:00   \n",
              "338                NaN                       NaN  2017-09-04 10:30:00   \n",
              "339                NaN  Data corrected for spike  2017-09-06 00:35:00   \n",
              "340                NaN                       NaN  2017-09-10 04:25:00   \n",
              "\n",
              "               slice_end  \n",
              "0    1986-02-04 17:45:00  \n",
              "1    1986-02-06 08:35:00  \n",
              "2    1986-02-07 13:25:00  \n",
              "3    1986-02-08 22:20:00  \n",
              "4    1986-02-12 06:00:00  \n",
              "..                   ...  \n",
              "336  2016-01-02 12:45:00  \n",
              "337  2017-07-16 19:40:00  \n",
              "338  2017-09-06 12:30:00  \n",
              "339  2017-09-08 14:35:00  \n",
              "340  2017-09-13 06:55:00  \n",
              "\n",
              "[341 rows x 45 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88f8e290-274f-4926-88f8-845e6936f459\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sep_index</th>\n",
              "      <th>pp_index</th>\n",
              "      <th>cdaw_sep_id</th>\n",
              "      <th>timestamp</th>\n",
              "      <th>cdaw_start_time</th>\n",
              "      <th>cdaw_max_time</th>\n",
              "      <th>cdaw_evn_max</th>\n",
              "      <th>cme_id</th>\n",
              "      <th>cme_launch_time</th>\n",
              "      <th>cme_1st_app_time</th>\n",
              "      <th>...</th>\n",
              "      <th>m_type2_onset_time</th>\n",
              "      <th>dh_type2_onset_time</th>\n",
              "      <th>noaa-sep_flag</th>\n",
              "      <th>Inst_category</th>\n",
              "      <th>Comments</th>\n",
              "      <th>Notes</th>\n",
              "      <th>Fe_e_p_shock_notes</th>\n",
              "      <th>gsep_notes</th>\n",
              "      <th>slice_start</th>\n",
              "      <th>slice_end</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>gsep_001</td>\n",
              "      <td>psep_012</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-04 09:25:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-03 21:25:00</td>\n",
              "      <td>1986-02-04 17:45:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>gsep_002</td>\n",
              "      <td>psep_013</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-05 02:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-04 14:00:00</td>\n",
              "      <td>1986-02-06 08:35:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>gsep_003</td>\n",
              "      <td>psep_014</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-06 08:35:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>S</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Spike</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-05 20:35:00</td>\n",
              "      <td>1986-02-07 13:25:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>gsep_004</td>\n",
              "      <td>psep_015</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-07 13:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Taken by 6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-07 01:00:00</td>\n",
              "      <td>1986-02-08 22:20:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>gsep_005</td>\n",
              "      <td>psep_016</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-10 21:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Spike</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-10 09:00:00</td>\n",
              "      <td>1986-02-12 06:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>336</th>\n",
              "      <td>gsep_337</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_148</td>\n",
              "      <td>2016-01-02 00:15:00</td>\n",
              "      <td>2016-01-02 00:15:00</td>\n",
              "      <td>2016-01-02 04:50:00</td>\n",
              "      <td>22.0</td>\n",
              "      <td>lasco_26928</td>\n",
              "      <td>2016-01-01 23:09:13</td>\n",
              "      <td>2016-01-01 23:24:00</td>\n",
              "      <td>...</td>\n",
              "      <td>2016-01-01 23:21:00</td>\n",
              "      <td>2016-01-02 00:55:00</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016-01-01 12:15:00</td>\n",
              "      <td>2016-01-02 12:45:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>337</th>\n",
              "      <td>gsep_338</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_149</td>\n",
              "      <td>2017-07-14 04:40:00</td>\n",
              "      <td>2017-07-14 04:40:00</td>\n",
              "      <td>2017-07-14 23:20:00</td>\n",
              "      <td>22.0</td>\n",
              "      <td>lasco_28753</td>\n",
              "      <td>2017-07-14 01:02:31</td>\n",
              "      <td>2017-07-14 01:25:00</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-07-13 16:40:00</td>\n",
              "      <td>2017-07-16 19:40:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>338</th>\n",
              "      <td>gsep_339</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_150</td>\n",
              "      <td>2017-09-04 22:30:00</td>\n",
              "      <td>2017-09-04 22:30:00</td>\n",
              "      <td>2017-09-05 19:20:00</td>\n",
              "      <td>210.0</td>\n",
              "      <td>lasco_28869</td>\n",
              "      <td>2017-09-04 20:13:01</td>\n",
              "      <td>2017-09-04 20:36:05</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-09-04 10:30:00</td>\n",
              "      <td>2017-09-06 12:30:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>339</th>\n",
              "      <td>gsep_340</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_151</td>\n",
              "      <td>2017-09-06 12:35:00</td>\n",
              "      <td>2017-09-06 12:35:00</td>\n",
              "      <td>2017-09-07 23:25:00</td>\n",
              "      <td>41.0</td>\n",
              "      <td>lasco_28874</td>\n",
              "      <td>2017-09-06 11:54:23</td>\n",
              "      <td>2017-09-06 12:24:00</td>\n",
              "      <td>...</td>\n",
              "      <td>2017-09-06 12:02:00</td>\n",
              "      <td>2017-09-06 12:05:00</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Data corrected for spike</td>\n",
              "      <td>2017-09-06 00:35:00</td>\n",
              "      <td>2017-09-08 14:35:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>340</th>\n",
              "      <td>gsep_341</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_152</td>\n",
              "      <td>2017-09-10 16:25:00</td>\n",
              "      <td>2017-09-10 16:25:00</td>\n",
              "      <td>2017-09-11 11:40:00</td>\n",
              "      <td>1490.0</td>\n",
              "      <td>lasco_28887</td>\n",
              "      <td>2017-09-10 15:46:33</td>\n",
              "      <td>2017-09-10 16:00:00</td>\n",
              "      <td>...</td>\n",
              "      <td>2017-09-10 15:53:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-09-10 04:25:00</td>\n",
              "      <td>2017-09-13 06:55:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>341 rows Ã— 45 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88f8e290-274f-4926-88f8-845e6936f459')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-88f8e290-274f-4926-88f8-845e6936f459 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-88f8e290-274f-4926-88f8-845e6936f459');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Choose which one you wanna use...\n",
        "f = GSEP_list.iloc[310]\n",
        "f"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "db482301-3337-46e2-d603-56565bfc54e1",
        "id": "f_sc3Pr-uBGj"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sep_index                         gsep_311\n",
              "pp_index                          psep_306\n",
              "cdaw_sep_id                   cdaw_sep_124\n",
              "timestamp              2012-07-12 17:10:00\n",
              "cdaw_start_time        2012-07-12 17:25:00\n",
              "cdaw_max_time          2012-07-12 22:25:00\n",
              "cdaw_evn_max                          96.0\n",
              "cme_id                         lasco_18957\n",
              "cme_launch_time        2012-07-12 16:12:05\n",
              "cme_1st_app_time       2012-07-12 16:48:00\n",
              "lasco_cme_width                        360\n",
              "p_cme_width                            360\n",
              "lasco_linear_speed                     885\n",
              "p_cme_speed                            885\n",
              "fl_id                         gid_sdo_2262\n",
              "fl_start_time          2012-07-12 15:37:00\n",
              "fl_peak_time           2012-07-12 16:49:00\n",
              "fl_rise_time                            72\n",
              "fl_lon                                 1.0\n",
              "fl_lat                               -15.0\n",
              "fl_goes_class                         X1.4\n",
              "noaa_ar                            11520.0\n",
              "noaa_ar_uncertain                    False\n",
              "harpnum                             1834.0\n",
              "noaa_pf10MeV                          96.0\n",
              "ppf_gt10MeV                          58.61\n",
              "ppf_gt30MeV                           2.98\n",
              "ppf_gt60MeV                           0.91\n",
              "ppf_gt100MeV                           NaN\n",
              "fluence_gt10MeV                  3450000.0\n",
              "fluence_gt30MeV                   473000.0\n",
              "fluence_gt60MeV                   248000.0\n",
              "fluence_gt100MeV                       NaN\n",
              "gsep_pf_gt10MeV                      96.08\n",
              "gsep_max_time          2012-07-12 22:25:00\n",
              "m_type2_onset_time     2012-07-12 16:25:00\n",
              "dh_type2_onset_time    2012-07-12 16:45:00\n",
              "noaa-sep_flag                            1\n",
              "Inst_category                            P\n",
              "Comments                               NaN\n",
              "Notes                                  NaN\n",
              "Fe_e_p_shock_notes                     NaN\n",
              "gsep_notes                             NaN\n",
              "slice_start            2012-07-12 05:25:00\n",
              "slice_end              2012-07-15 11:10:00\n",
              "Name: 310, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f['ppf_gt60MeV']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "05a515c4-36da-4178-fc0d-37a95739fe39",
        "id": "xkarkc2puBGj"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.91"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f['fl_start_time']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "2a131b04-6a6f-4439-a812-64a3eb80b288",
        "id": "xJlRKk2uuBGj"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2012-07-12 15:37:00'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "4oL8GOq8uBGj"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = f['fl_start_time']"
      ],
      "metadata": {
        "id": "tPkFDx7guBGk"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def convertStr(s):\n",
        "  my_x = s[-4]\n",
        "  if(int(my_x)<5):\n",
        "     return s[:-4] + '0' + ':00'\n",
        "  else:\n",
        "     return s[:-4] + '5' + ':00'\n"
      ],
      "metadata": {
        "id": "Wv-ET26YuBGk"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list_all = []\n",
        "\n",
        "rounded = convertStr(x)\n",
        "GSEP_list_all.append(rounded)\n"
      ],
      "metadata": {
        "id": "P3fwxCi0uBGk"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "################################################"
      ],
      "metadata": {
        "id": "Uleqwoo_uBGk"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list_all"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e227648a-69f5-4ee7-f007-aec4499bb8e5",
        "id": "ofz2ryOvuBGk"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['2012-07-12 15:35:00']"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import re\n",
        "\n",
        "my_dates_sep2 = []\n",
        "my_links_sep2 = []\n",
        "for i in GSEP_list_all: # because we will have inconsistent column names after the year 2011. We will not consider them.\n",
        "  \n",
        "  my_link1 = 'https://www.ncei.noaa.gov/data/goes-space-environment-monitor/access/avg/' + i[0:4] + '/' + i[5:7] + '/'\n",
        "  \n",
        "  page1 = requests.get(my_link1)\n",
        "  bs1 = BeautifulSoup(page1.content, features='lxml')\n",
        "\n",
        "  my_string1 = []\n",
        "  for l in bs1.findAll('a', attrs={'href': re.compile(\"^g\")}):\n",
        "    my_list1 = l.get('href')\n",
        "    my_string1.append(my_list1)\n",
        "\n",
        "  my_link = my_link1 + my_string1[0] + 'csv/'    # only considering the first goes. eg.: selecting goes06/ in goes06/ and goes07/\n",
        "\n",
        "  page = requests.get(my_link)\n",
        "  bs = BeautifulSoup(page.content, features='lxml')\n",
        "  my_string = []\n",
        "  for k in bs.findAll('a', attrs={'href': re.compile(\"^g\")}):\n",
        "    my_list = k.get('href')\n",
        "    my_string.append(my_list)\n",
        "  # print(my_string[0]) # only considering g05_eps_5m_ in g05_eps_5m_ and g05_eps_5m_3s_\n",
        "\n",
        "  my_sublink = []\n",
        "  for m in my_string:\n",
        "    if m[4:19] == 'epead_p17ew_5m_':  #only considering g13_epead_p17ew_5m_\n",
        "      my_sublink.append(m)\n",
        "  my_last_link = my_link + my_sublink[0] \n",
        "  # print(my_last_link)\n",
        "  my_links_sep2.append(my_last_link)\n",
        "  my_dates_sep2.append(i)\n",
        "\n",
        "print(my_links_sep2)  # uae this lst to collect the data later"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1eb5603d-da36-4619-c7fb-bd9098bb023d",
        "id": "nC5JuxRkuBGk"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['https://www.ncei.noaa.gov/data/goes-space-environment-monitor/access/avg/2012/07/goes13/csv/g13_epead_p17ew_5m_20120701_20120731.csv']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_df_nsep = pd.DataFrame({'Link': my_links_sep2, 'SEP Date': my_dates_sep2})\n",
        "\n",
        "my_df_nsep"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "outputId": "d165e8f9-076e-4a51-daf0-9f061cff6907",
        "id": "X8IyVjMXuBGk"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                Link             SEP Date\n",
              "0  https://www.ncei.noaa.gov/data/goes-space-envi...  2012-07-12 15:35:00"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c073cbaa-3ebc-4503-beee-882d5e74a983\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Link</th>\n",
              "      <th>SEP Date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>https://www.ncei.noaa.gov/data/goes-space-envi...</td>\n",
              "      <td>2012-07-12 15:35:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c073cbaa-3ebc-4503-beee-882d5e74a983')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c073cbaa-3ebc-4503-beee-882d5e74a983 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c073cbaa-3ebc-4503-beee-882d5e74a983');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_df_nsep.to_csv('/content/SEP_list.csv', index=False)"
      ],
      "metadata": {
        "id": "nx7dmGAhuBGl"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "my_dates_sep2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0cc64d92-93ad-4cc6-c788-e755ef0c12fa",
        "id": "G8I3uTbLuBGl"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['2012-07-12 15:35:00']"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "all_data = []\n",
        "index = 0\n",
        "dropped_indices = []\n",
        "for r in my_links_sep2:\n",
        "\n",
        "\n",
        "\n",
        "  if my_dates_sep2[index][0:4] < '1997':  # we have different column names after this date in GOES data :\\\n",
        "\n",
        "    data = pd.read_csv(r, sep=\"\\t\", names = ['p'])\n",
        "\n",
        "    data[['time_tag','e2_flux_ic','p1_flux','p2_flux','p3_flux','p4_flux','p5_flux','p6_flux','p7_flux',\n",
        "          'a1_flux','a2_flux','a3_flux','a4_flux','a5_flux','a6_flux','p1_flux_c','p2_flux_c','p3_flux_c',\n",
        "          'p4_flux_c','p5_flux_c','p6_flux_c','p7_flux_c','p1_flux_ic','p2_flux_ic','p3_flux_ic','p4_flux_ic',\n",
        "          'p5_flux_ic','p6_flux_ic','p7_flux_ic']] = data[\"p\"].apply(lambda x: pd.Series(str(x).split(\",\")))\n",
        "\n",
        "    data = data.drop(['p'], axis = 1)\n",
        "    \n",
        "\n",
        "    start_string = my_dates_sep2[index][0:7] + '-01' + ' ' + '00:00:00.000'  # defining the data start time of the csv file\n",
        "\n",
        "    x1 = data[data['time_tag'] == start_string]\n",
        "\n",
        "    y = x1.index # first time_tag\n",
        "\n",
        "    df1 = data.iloc[y[0]:]\n",
        "\n",
        "    df1 = df1.reset_index(drop = True)\n",
        "\n",
        "    flare_string = my_dates_sep2[index] + '.000'\n",
        "    p = df1[df1['time_tag'] == flare_string] # flare stert time. .. \n",
        "    q = p.index\n",
        "    #q[0] # flare start time index\n",
        "\n",
        "\n",
        "    span = 60                        # SPAN ... 60 --- observation window is 5 hours (60 values) before the flare start time!!!!!\n",
        "    df2 = df1.iloc[q[0]-span: q[0]]\n",
        "\n",
        "    if q[0]-y[0] < span:  # if the flare start time plus span is greater than the length of the csv file, drop the data\n",
        "      u = 5 # do nothing! or break!\n",
        "      dropped_indices.append(index)  \n",
        "    elif '-99999.0' in df2['p4_flux'].tolist() or '-99999.0' in df2['p5_flux'].tolist() or '-99999.0' in df2['p6_flux'].tolist(): # if there is missing value in selected data of span window of size span, drop the data\n",
        "      u = 5 # do nothing! or break!  \n",
        "      dropped_indices.append(index)  \n",
        "    else:\n",
        "      my_temp = df2['p6_flux'].append(df2['p5_flux'])\n",
        "      yyy = my_temp.append(df2['p4_flux'])\n",
        "      all_data.append(yyy)\n",
        "\n",
        "    index += 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "  elif my_dates_sep2[index][0:4] >= '1997' and my_dates_sep2[index][0:4] < '2011' :\n",
        "\n",
        "    data = pd.read_csv(r, sep=\"\\t\", names = ['p'])\n",
        "\n",
        "    data[['time_tag','e1_flux_ic','e2_flux_ic','e3_flux_ic','p1_flux','p2_flux','p3_flux','p4_flux','p5_flux',\n",
        "          'p6_flux','p7_flux','a1_flux','a2_flux','a3_flux','a4_flux','a5_flux','a6_flux','p1_flux_c','p2_flux_c',\n",
        "          'p3_flux_c','p4_flux_c','p5_flux_c','p6_flux_c','p7_flux_c','p1_flux_ic','p2_flux_ic','p3_flux_ic',\n",
        "          'p4_flux_ic','p5_flux_ic','p6_flux_ic','p7_flux_ic']] = data[\"p\"].apply(lambda x: pd.Series(str(x).split(\",\")))\n",
        "\n",
        "\n",
        "    data = data.drop(['p'], axis = 1)\n",
        "    \n",
        "\n",
        "    start_string = my_dates_sep2[index][0:7] + '-01' + ' ' + '00:00:00.000'  # defining the data start time of the csv file\n",
        "\n",
        "    x1 = data[data['time_tag'] == start_string]\n",
        "\n",
        "    y = x1.index # first time_tag\n",
        "\n",
        "    df1 = data.iloc[y[0]:]\n",
        "\n",
        "    df1 = df1.reset_index(drop = True)\n",
        "\n",
        "    flare_string = my_dates_sep2[index] + '.000'\n",
        "    p = df1[df1['time_tag'] == flare_string] # flare stert time. .. \n",
        "    q = p.index\n",
        "    #q[0] # flare start time index\n",
        "\n",
        "\n",
        "    span = 60                        # SPAN ... 60 --- observation window is 5 hours (60 values) before the flare start time!!!!!\n",
        "    # df2 = df1.iloc[q[0]:q[0]-span]\n",
        "    df2 = df1.iloc[q[0]-span: q[0]]\n",
        "    # if q[0]+span > len(df1):  # if the flare start time plus span is greater than the length of the csv file, drop the data\n",
        "    if q[0]-y[0] < span:  # if the flare start time minus span is less than the length of the csv file, drop the data\n",
        "      u = 5 # do nothing! or break!\n",
        "      dropped_indices.append(index)  \n",
        "    elif '-99999.0' in df2['p4_flux'].tolist() or '-99999.0' in df2['p5_flux'].tolist() or '-99999.0' in df2['p6_flux'].tolist(): # if there is missing value in selected data of span window of size span, drop the dat\n",
        "      u = 5 # do nothing! or break!  \n",
        "      dropped_indices.append(index)  \n",
        "    else:\n",
        "      my_temp = df2['p6_flux'].append(df2['p5_flux'])\n",
        "      yyy = my_temp.append(df2['p4_flux'])\n",
        "      all_data.append(yyy)\n",
        "\n",
        "    index += 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "  else:\n",
        "\n",
        "    data = pd.read_csv(r, sep=\"\\t\", names = ['p'])\n",
        "\n",
        "    data[['time_tag','P1E_NUM_PTS','P1E_QUAL_FLAG','P1E_UNCOR_FLUX','P1E_COR_FLUX','P1W_NUM_PTS','P1W_QUAL_FLAG','P1W_UNCOR_FLUX','P1W_COR_FLUX','P2E_NUM_PTS','P2E_QUAL_FLAG','P2E_UNCOR_FLUX','P2E_COR_FLUX','P2W_NUM_PTS','P2W_QUAL_FLAG','P2W_UNCOR_FLUX','P2W_COR_FLUX','P3E_NUM_PTS',\n",
        "          'P3E_QUAL_FLAG','P3E_UNCOR_FLUX','P3E_COR_FLUX','P3W_NUM_PTS','P3W_QUAL_FLAG','P3W_UNCOR_FLUX','P3W_COR_FLUX','P4E_NUM_PTS','P4E_QUAL_FLAG','P4E_UNCOR_FLUX','P4E_COR_FLUX','P4W_NUM_PTS','P4W_QUAL_FLAG','P4W_UNCOR_FLUX','P4W_COR_FLUX','P5E_NUM_PTS','P5E_QUAL_FLAG','P5E_UNCOR_FLUX',\n",
        "          'P5E_COR_FLUX','P5W_NUM_PTS','P5W_QUAL_FLAG','P5W_UNCOR_FLUX','P5W_COR_FLUX','P6E_NUM_PTS','P6E_QUAL_FLAG','P6E_UNCOR_FLUX','P6E_COR_FLUX','P6W_NUM_PTS','P6W_QUAL_FLAG','P6W_UNCOR_FLUX','P6W_COR_FLUX','P7E_NUM_PTS','P7E_QUAL_FLAG','P7E_UNCOR_FLUX','P7E_COR_FLUX','P7W_NUM_PTS',\n",
        "          'P7W_QUAL_FLAG','P7W_UNCOR_FLUX','P7W_COR_FLUX']] = data[\"p\"].apply(lambda x: pd.Series(str(x).split(\",\")))\n",
        "\n",
        "\n",
        "    data = data.drop(['p'], axis = 1)\n",
        "    \n",
        "\n",
        "    start_string = my_dates_sep2[index][0:7] + '-01' + ' ' + '00:00:00.000'  # defining the data start time of the csv file\n",
        "\n",
        "    x1 = data[data['time_tag'] == start_string]\n",
        "\n",
        "    y = x1.index # first time_tag\n",
        "\n",
        "    df1 = data.iloc[y[0]:]\n",
        "\n",
        "    df1 = df1.reset_index(drop = True)\n",
        "\n",
        "    flare_string = my_dates_sep2[index] + '.000'\n",
        "    p = df1[df1['time_tag'] == flare_string] # flare stert time. .. \n",
        "    q = p.index\n",
        "    #q[0] # flare start time index\n",
        "\n",
        "\n",
        "    span = 60                        # SPAN ... 60 --- observation window is 5 hours (60 values) before the flare start time!!!!!\n",
        "    # df2 = df1.iloc[q[0]:q[0]-span]\n",
        "    df2 = df1.iloc[q[0]-span: q[0]]\n",
        "    # if q[0]+span > len(df1):  # if the flare start time plus span is greater than the length of the csv file, drop the data\n",
        "    if q[0]-y[0] < span:  # if the flare start time minus span is less than the length of the csv file, drop the data\n",
        "      u = 5 # do nothing! or break!\n",
        "      dropped_indices.append(index)  \n",
        "    elif '-99999.0' in df2['P4W_UNCOR_FLUX'].tolist() or '-99999.0' in df2['P5W_UNCOR_FLUX'].tolist() or '-99999.0' in df2['P6W_UNCOR_FLUX'].tolist(): # if there is missing value in selected data of span window of size span, drop the dat\n",
        "      u = 5 # do nothing! or break!  \n",
        "      dropped_indices.append(index)  \n",
        "    else:\n",
        "      my_temp = df2['P6W_UNCOR_FLUX'].append(df2['P5W_UNCOR_FLUX'])\n",
        "      yyy = my_temp.append(df2['P4W_UNCOR_FLUX'])\n",
        "      all_data.append(yyy)\n",
        "\n",
        "    index += 1\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7d9b66a1-4be4-475f-e1d2-18956e8d5051",
        "id": "qCtOtpwZuBGl"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-70-a473a5b3c43e>:144: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  my_temp = df2['P6W_UNCOR_FLUX'].append(df2['P5W_UNCOR_FLUX'])\n",
            "<ipython-input-70-a473a5b3c43e>:145: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  yyy = my_temp.append(df2['P4W_UNCOR_FLUX'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DF = pd.DataFrame()\n",
        "my = pd.Series(all_data)\n",
        "for sample,data in my.items():\n",
        "  c = data.reset_index(drop = True)\n",
        "  DF = DF.append(c,ignore_index=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "97289d66-4817-476c-bf6a-9b94a7a69542",
        "id": "-xAFqXnhuBGl"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-71-99feedb46e78>:5: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  DF = DF.append(c,ignore_index=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DF"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "d801df1b-3b0c-4db2-82e0-fb66f5f84eb0",
        "id": "iA1zJQC-uBGl"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0           1           2           3           4           5    \\\n",
              "0  3.5908E-03  4.6409E-03  4.4377E-03  4.8103E-03  4.1667E-03  4.7087E-03   \n",
              "\n",
              "          6           7           8           9    ...         170  \\\n",
              "0  3.8618E-03  4.7087E-03  4.2344E-03  4.2005E-03  ...  1.5112E-02   \n",
              "\n",
              "          171         172         173         174         175         176  \\\n",
              "0  1.3798E-02  1.1827E-02  2.5626E-02  1.9712E-02  1.6427E-02  1.8398E-02   \n",
              "\n",
              "          177         178         179  \n",
              "0  1.6427E-02  1.8398E-02  2.4311E-02  \n",
              "\n",
              "[1 rows x 180 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a985c833-9252-4e76-be10-a86c43fa72d0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>170</th>\n",
              "      <th>171</th>\n",
              "      <th>172</th>\n",
              "      <th>173</th>\n",
              "      <th>174</th>\n",
              "      <th>175</th>\n",
              "      <th>176</th>\n",
              "      <th>177</th>\n",
              "      <th>178</th>\n",
              "      <th>179</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3.5908E-03</td>\n",
              "      <td>4.6409E-03</td>\n",
              "      <td>4.4377E-03</td>\n",
              "      <td>4.8103E-03</td>\n",
              "      <td>4.1667E-03</td>\n",
              "      <td>4.7087E-03</td>\n",
              "      <td>3.8618E-03</td>\n",
              "      <td>4.7087E-03</td>\n",
              "      <td>4.2344E-03</td>\n",
              "      <td>4.2005E-03</td>\n",
              "      <td>...</td>\n",
              "      <td>1.5112E-02</td>\n",
              "      <td>1.3798E-02</td>\n",
              "      <td>1.1827E-02</td>\n",
              "      <td>2.5626E-02</td>\n",
              "      <td>1.9712E-02</td>\n",
              "      <td>1.6427E-02</td>\n",
              "      <td>1.8398E-02</td>\n",
              "      <td>1.6427E-02</td>\n",
              "      <td>1.8398E-02</td>\n",
              "      <td>2.4311E-02</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows Ã— 180 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a985c833-9252-4e76-be10-a86c43fa72d0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a985c833-9252-4e76-be10-a86c43fa72d0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a985c833-9252-4e76-be10-a86c43fa72d0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DF.to_csv('/content/SEP_data_60MeV_one.csv', index=False)"
      ],
      "metadata": {
        "id": "SVgI6dq0uBGm"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "b = pd.read_csv(\"/content/SEP_data_60MeV_one.csv\", header = 0)\n"
      ],
      "metadata": {
        "id": "3Ptrj8PDuBGm"
      },
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 174
        },
        "outputId": "b39fc2c2-3f6e-4b8e-b8b3-2027803cb88f",
        "id": "Y4il4lP4uBGm"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0         1         2        3         4         5         6  \\\n",
              "0  0.003591  0.004641  0.004438  0.00481  0.004167  0.004709  0.003862   \n",
              "\n",
              "          7         8         9  ...       170       171       172       173  \\\n",
              "0  0.004709  0.004234  0.004201  ...  0.015112  0.013798  0.011827  0.025626   \n",
              "\n",
              "        174       175       176       177       178       179  \n",
              "0  0.019712  0.016427  0.018398  0.016427  0.018398  0.024311  \n",
              "\n",
              "[1 rows x 180 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ae7c10a2-3694-4b46-a63c-8fb6916f3570\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>170</th>\n",
              "      <th>171</th>\n",
              "      <th>172</th>\n",
              "      <th>173</th>\n",
              "      <th>174</th>\n",
              "      <th>175</th>\n",
              "      <th>176</th>\n",
              "      <th>177</th>\n",
              "      <th>178</th>\n",
              "      <th>179</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.003591</td>\n",
              "      <td>0.004641</td>\n",
              "      <td>0.004438</td>\n",
              "      <td>0.00481</td>\n",
              "      <td>0.004167</td>\n",
              "      <td>0.004709</td>\n",
              "      <td>0.003862</td>\n",
              "      <td>0.004709</td>\n",
              "      <td>0.004234</td>\n",
              "      <td>0.004201</td>\n",
              "      <td>...</td>\n",
              "      <td>0.015112</td>\n",
              "      <td>0.013798</td>\n",
              "      <td>0.011827</td>\n",
              "      <td>0.025626</td>\n",
              "      <td>0.019712</td>\n",
              "      <td>0.016427</td>\n",
              "      <td>0.018398</td>\n",
              "      <td>0.016427</td>\n",
              "      <td>0.018398</td>\n",
              "      <td>0.024311</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows Ã— 180 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae7c10a2-3694-4b46-a63c-8fb6916f3570')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ae7c10a2-3694-4b46-a63c-8fb6916f3570 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ae7c10a2-3694-4b46-a63c-8fb6916f3570');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LB895JpIuBGm"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "h470ODjmuAkn"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "1mwTZTvwuAiR"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "j8wB-6iaui4N"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "RRjx7mrfui2q"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 30 MeV"
      ],
      "metadata": {
        "id": "w6TspYb6umdE"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "metadata": {
        "id": "fstn-18aumdE"
      },
      "outputs": [],
      "source": [
        "# Collecting just one sample for visualization..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 77,
      "metadata": {
        "id": "Se4egwhpumdE"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "from pandas import read_csv\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list = pd.read_csv(\"/content/sample_data/GSEP_List.csv\", header = 0)\n"
      ],
      "metadata": {
        "id": "Jt9tXW0oumdE"
      },
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 696
        },
        "outputId": "4e649420-200a-4569-9ab9-560fc05e9cb4",
        "id": "xOtHa8EFumdF"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    sep_index  pp_index   cdaw_sep_id            timestamp  \\\n",
              "0    gsep_001  psep_012           NaN  1986-02-04 09:25:00   \n",
              "1    gsep_002  psep_013           NaN  1986-02-05 02:00:00   \n",
              "2    gsep_003  psep_014           NaN  1986-02-06 08:35:00   \n",
              "3    gsep_004  psep_015           NaN  1986-02-07 13:00:00   \n",
              "4    gsep_005  psep_016           NaN  1986-02-10 21:00:00   \n",
              "..        ...       ...           ...                  ...   \n",
              "336  gsep_337       NaN  cdaw_sep_148  2016-01-02 00:15:00   \n",
              "337  gsep_338       NaN  cdaw_sep_149  2017-07-14 04:40:00   \n",
              "338  gsep_339       NaN  cdaw_sep_150  2017-09-04 22:30:00   \n",
              "339  gsep_340       NaN  cdaw_sep_151  2017-09-06 12:35:00   \n",
              "340  gsep_341       NaN  cdaw_sep_152  2017-09-10 16:25:00   \n",
              "\n",
              "         cdaw_start_time        cdaw_max_time  cdaw_evn_max       cme_id  \\\n",
              "0                    NaN                  NaN           NaN          NaN   \n",
              "1                    NaN                  NaN           NaN          NaN   \n",
              "2                    NaN                  NaN           NaN          NaN   \n",
              "3                    NaN                  NaN           NaN          NaN   \n",
              "4                    NaN                  NaN           NaN          NaN   \n",
              "..                   ...                  ...           ...          ...   \n",
              "336  2016-01-02 00:15:00  2016-01-02 04:50:00          22.0  lasco_26928   \n",
              "337  2017-07-14 04:40:00  2017-07-14 23:20:00          22.0  lasco_28753   \n",
              "338  2017-09-04 22:30:00  2017-09-05 19:20:00         210.0  lasco_28869   \n",
              "339  2017-09-06 12:35:00  2017-09-07 23:25:00          41.0  lasco_28874   \n",
              "340  2017-09-10 16:25:00  2017-09-11 11:40:00        1490.0  lasco_28887   \n",
              "\n",
              "         cme_launch_time     cme_1st_app_time  ...   m_type2_onset_time  \\\n",
              "0                    NaN                  NaN  ...                  NaN   \n",
              "1                    NaN                  NaN  ...                  NaN   \n",
              "2                    NaN                  NaN  ...                  NaN   \n",
              "3                    NaN                  NaN  ...                  NaN   \n",
              "4                    NaN                  NaN  ...                  NaN   \n",
              "..                   ...                  ...  ...                  ...   \n",
              "336  2016-01-01 23:09:13  2016-01-01 23:24:00  ...  2016-01-01 23:21:00   \n",
              "337  2017-07-14 01:02:31  2017-07-14 01:25:00  ...                  NaN   \n",
              "338  2017-09-04 20:13:01  2017-09-04 20:36:05  ...                  NaN   \n",
              "339  2017-09-06 11:54:23  2017-09-06 12:24:00  ...  2017-09-06 12:02:00   \n",
              "340  2017-09-10 15:46:33  2017-09-10 16:00:00  ...  2017-09-10 15:53:00   \n",
              "\n",
              "     dh_type2_onset_time noaa-sep_flag Inst_category    Comments  Notes  \\\n",
              "0                    NaN             0             S         NaN    NaN   \n",
              "1                    NaN             0             S         NaN    NaN   \n",
              "2                    NaN             1             S         NaN  Spike   \n",
              "3                    NaN             0             S  Taken by 6    NaN   \n",
              "4                    NaN             0             S         NaN  Spike   \n",
              "..                   ...           ...           ...         ...    ...   \n",
              "336  2016-01-02 00:55:00             1             P         NaN    NaN   \n",
              "337                  NaN             1             P         NaN    NaN   \n",
              "338                  NaN             1             P         NaN    NaN   \n",
              "339  2017-09-06 12:05:00             1             P         NaN    NaN   \n",
              "340                  NaN             1             P         NaN    NaN   \n",
              "\n",
              "    Fe_e_p_shock_notes                gsep_notes          slice_start  \\\n",
              "0                  NaN             AR from LMSAL  1986-02-03 21:25:00   \n",
              "1                  NaN             AR from LMSAL  1986-02-04 14:00:00   \n",
              "2                  NaN             AR from LMSAL  1986-02-05 20:35:00   \n",
              "3                  NaN             AR from LMSAL  1986-02-07 01:00:00   \n",
              "4                  NaN             AR from LMSAL  1986-02-10 09:00:00   \n",
              "..                 ...                       ...                  ...   \n",
              "336                NaN                       NaN  2016-01-01 12:15:00   \n",
              "337                NaN                       NaN  2017-07-13 16:40:00   \n",
              "338                NaN                       NaN  2017-09-04 10:30:00   \n",
              "339                NaN  Data corrected for spike  2017-09-06 00:35:00   \n",
              "340                NaN                       NaN  2017-09-10 04:25:00   \n",
              "\n",
              "               slice_end  \n",
              "0    1986-02-04 17:45:00  \n",
              "1    1986-02-06 08:35:00  \n",
              "2    1986-02-07 13:25:00  \n",
              "3    1986-02-08 22:20:00  \n",
              "4    1986-02-12 06:00:00  \n",
              "..                   ...  \n",
              "336  2016-01-02 12:45:00  \n",
              "337  2017-07-16 19:40:00  \n",
              "338  2017-09-06 12:30:00  \n",
              "339  2017-09-08 14:35:00  \n",
              "340  2017-09-13 06:55:00  \n",
              "\n",
              "[341 rows x 45 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9b45234a-bc0c-41b8-a34b-bd2066e737f2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sep_index</th>\n",
              "      <th>pp_index</th>\n",
              "      <th>cdaw_sep_id</th>\n",
              "      <th>timestamp</th>\n",
              "      <th>cdaw_start_time</th>\n",
              "      <th>cdaw_max_time</th>\n",
              "      <th>cdaw_evn_max</th>\n",
              "      <th>cme_id</th>\n",
              "      <th>cme_launch_time</th>\n",
              "      <th>cme_1st_app_time</th>\n",
              "      <th>...</th>\n",
              "      <th>m_type2_onset_time</th>\n",
              "      <th>dh_type2_onset_time</th>\n",
              "      <th>noaa-sep_flag</th>\n",
              "      <th>Inst_category</th>\n",
              "      <th>Comments</th>\n",
              "      <th>Notes</th>\n",
              "      <th>Fe_e_p_shock_notes</th>\n",
              "      <th>gsep_notes</th>\n",
              "      <th>slice_start</th>\n",
              "      <th>slice_end</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>gsep_001</td>\n",
              "      <td>psep_012</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-04 09:25:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-03 21:25:00</td>\n",
              "      <td>1986-02-04 17:45:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>gsep_002</td>\n",
              "      <td>psep_013</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-05 02:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-04 14:00:00</td>\n",
              "      <td>1986-02-06 08:35:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>gsep_003</td>\n",
              "      <td>psep_014</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-06 08:35:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>S</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Spike</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-05 20:35:00</td>\n",
              "      <td>1986-02-07 13:25:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>gsep_004</td>\n",
              "      <td>psep_015</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-07 13:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>Taken by 6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-07 01:00:00</td>\n",
              "      <td>1986-02-08 22:20:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>gsep_005</td>\n",
              "      <td>psep_016</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1986-02-10 21:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>S</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Spike</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AR from LMSAL</td>\n",
              "      <td>1986-02-10 09:00:00</td>\n",
              "      <td>1986-02-12 06:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>336</th>\n",
              "      <td>gsep_337</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_148</td>\n",
              "      <td>2016-01-02 00:15:00</td>\n",
              "      <td>2016-01-02 00:15:00</td>\n",
              "      <td>2016-01-02 04:50:00</td>\n",
              "      <td>22.0</td>\n",
              "      <td>lasco_26928</td>\n",
              "      <td>2016-01-01 23:09:13</td>\n",
              "      <td>2016-01-01 23:24:00</td>\n",
              "      <td>...</td>\n",
              "      <td>2016-01-01 23:21:00</td>\n",
              "      <td>2016-01-02 00:55:00</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016-01-01 12:15:00</td>\n",
              "      <td>2016-01-02 12:45:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>337</th>\n",
              "      <td>gsep_338</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_149</td>\n",
              "      <td>2017-07-14 04:40:00</td>\n",
              "      <td>2017-07-14 04:40:00</td>\n",
              "      <td>2017-07-14 23:20:00</td>\n",
              "      <td>22.0</td>\n",
              "      <td>lasco_28753</td>\n",
              "      <td>2017-07-14 01:02:31</td>\n",
              "      <td>2017-07-14 01:25:00</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-07-13 16:40:00</td>\n",
              "      <td>2017-07-16 19:40:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>338</th>\n",
              "      <td>gsep_339</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_150</td>\n",
              "      <td>2017-09-04 22:30:00</td>\n",
              "      <td>2017-09-04 22:30:00</td>\n",
              "      <td>2017-09-05 19:20:00</td>\n",
              "      <td>210.0</td>\n",
              "      <td>lasco_28869</td>\n",
              "      <td>2017-09-04 20:13:01</td>\n",
              "      <td>2017-09-04 20:36:05</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-09-04 10:30:00</td>\n",
              "      <td>2017-09-06 12:30:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>339</th>\n",
              "      <td>gsep_340</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_151</td>\n",
              "      <td>2017-09-06 12:35:00</td>\n",
              "      <td>2017-09-06 12:35:00</td>\n",
              "      <td>2017-09-07 23:25:00</td>\n",
              "      <td>41.0</td>\n",
              "      <td>lasco_28874</td>\n",
              "      <td>2017-09-06 11:54:23</td>\n",
              "      <td>2017-09-06 12:24:00</td>\n",
              "      <td>...</td>\n",
              "      <td>2017-09-06 12:02:00</td>\n",
              "      <td>2017-09-06 12:05:00</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Data corrected for spike</td>\n",
              "      <td>2017-09-06 00:35:00</td>\n",
              "      <td>2017-09-08 14:35:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>340</th>\n",
              "      <td>gsep_341</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cdaw_sep_152</td>\n",
              "      <td>2017-09-10 16:25:00</td>\n",
              "      <td>2017-09-10 16:25:00</td>\n",
              "      <td>2017-09-11 11:40:00</td>\n",
              "      <td>1490.0</td>\n",
              "      <td>lasco_28887</td>\n",
              "      <td>2017-09-10 15:46:33</td>\n",
              "      <td>2017-09-10 16:00:00</td>\n",
              "      <td>...</td>\n",
              "      <td>2017-09-10 15:53:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>P</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017-09-10 04:25:00</td>\n",
              "      <td>2017-09-13 06:55:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>341 rows Ã— 45 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b45234a-bc0c-41b8-a34b-bd2066e737f2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9b45234a-bc0c-41b8-a34b-bd2066e737f2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9b45234a-bc0c-41b8-a34b-bd2066e737f2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Choose which one you wanna use...\n",
        "f = GSEP_list.iloc[297]\n",
        "f"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7d781375-20dc-4b9a-9e95-1641c6230b64",
        "id": "kbeZILggumdF"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sep_index                         gsep_298\n",
              "pp_index                          psep_294\n",
              "cdaw_sep_id                            NaN\n",
              "timestamp              2011-12-25 18:55:00\n",
              "cdaw_start_time                        NaN\n",
              "cdaw_max_time                          NaN\n",
              "cdaw_evn_max                           NaN\n",
              "cme_id                         lasco_17825\n",
              "cme_launch_time        2011-12-25 17:00:52\n",
              "cme_1st_app_time       2011-12-25 18:48:06\n",
              "lasco_cme_width                        125\n",
              "p_cme_width                            125\n",
              "lasco_linear_speed                     366\n",
              "p_cme_speed                            366\n",
              "fl_id                         gid_sdo_1374\n",
              "fl_start_time          2011-12-25 18:11:00\n",
              "fl_peak_time           2011-12-25 18:16:00\n",
              "fl_rise_time                             5\n",
              "fl_lon                                31.0\n",
              "fl_lat                               -21.0\n",
              "fl_goes_class                         M4.0\n",
              "noaa_ar                            11387.0\n",
              "noaa_ar_uncertain                    False\n",
              "harpnum                             1209.0\n",
              "noaa_pf10MeV                           NaN\n",
              "ppf_gt10MeV                            3.5\n",
              "ppf_gt30MeV                           1.47\n",
              "ppf_gt60MeV                            NaN\n",
              "ppf_gt100MeV                           NaN\n",
              "fluence_gt10MeV                   141000.0\n",
              "fluence_gt30MeV                    69700.0\n",
              "fluence_gt60MeV                        NaN\n",
              "fluence_gt100MeV                       NaN\n",
              "gsep_pf_gt10MeV                     3.2303\n",
              "gsep_max_time          2011-12-26 01:35:00\n",
              "m_type2_onset_time                     NaN\n",
              "dh_type2_onset_time                    NaN\n",
              "noaa-sep_flag                            0\n",
              "Inst_category                            P\n",
              "Comments                               NaN\n",
              "Notes                                  NaN\n",
              "Fe_e_p_shock_notes                     NaN\n",
              "gsep_notes                             NaN\n",
              "slice_start            2011-12-25 06:55:00\n",
              "slice_end              2011-12-26 12:55:00\n",
              "Name: 297, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f['ppf_gt60MeV']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "43a71619-6f40-446d-ba50-7d56a81c5bd0",
        "id": "lGt_6HIcumdF"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "nan"
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f['fl_start_time']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "3a9a4398-ac1d-43f8-a2d5-ab2d648ab617",
        "id": "C9P3aVI5umdF"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2011-12-25 18:11:00'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Vjhtr_Z0umdF"
      },
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = f['fl_start_time']"
      ],
      "metadata": {
        "id": "5WnJHcl-umdF"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def convertStr(s):\n",
        "  my_x = s[-4]\n",
        "  if(int(my_x)<5):\n",
        "     return s[:-4] + '0' + ':00'\n",
        "  else:\n",
        "     return s[:-4] + '5' + ':00'\n"
      ],
      "metadata": {
        "id": "_jWF9xYPumdF"
      },
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list_all = []\n",
        "\n",
        "rounded = convertStr(x)\n",
        "GSEP_list_all.append(rounded)\n"
      ],
      "metadata": {
        "id": "C3VzMUeYumdF"
      },
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "################################################"
      ],
      "metadata": {
        "id": "aYl8ZJ3SumdF"
      },
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GSEP_list_all"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "de43b6d5-1744-4487-c98b-a974ae1691d0",
        "id": "c23R2UDbumdG"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['2011-12-25 18:10:00']"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import re\n",
        "\n",
        "my_dates_sep2 = []\n",
        "my_links_sep2 = []\n",
        "for i in GSEP_list_all: # because we will have inconsistent column names after the year 2011. We will not consider them.\n",
        "  \n",
        "  my_link1 = 'https://www.ncei.noaa.gov/data/goes-space-environment-monitor/access/avg/' + i[0:4] + '/' + i[5:7] + '/'\n",
        "  \n",
        "  page1 = requests.get(my_link1)\n",
        "  bs1 = BeautifulSoup(page1.content, features='lxml')\n",
        "\n",
        "  my_string1 = []\n",
        "  for l in bs1.findAll('a', attrs={'href': re.compile(\"^g\")}):\n",
        "    my_list1 = l.get('href')\n",
        "    my_string1.append(my_list1)\n",
        "\n",
        "  my_link = my_link1 + my_string1[0] + 'csv/'    # only considering the first goes. eg.: selecting goes06/ in goes06/ and goes07/\n",
        "\n",
        "  page = requests.get(my_link)\n",
        "  bs = BeautifulSoup(page.content, features='lxml')\n",
        "  my_string = []\n",
        "  for k in bs.findAll('a', attrs={'href': re.compile(\"^g\")}):\n",
        "    my_list = k.get('href')\n",
        "    my_string.append(my_list)\n",
        "  # print(my_string[0]) # only considering g05_eps_5m_ in g05_eps_5m_ and g05_eps_5m_3s_\n",
        "\n",
        "  my_sublink = []\n",
        "  for m in my_string:\n",
        "    if m[4:19] == 'epead_p17ew_5m_':  #only considering g13_epead_p17ew_5m_\n",
        "      my_sublink.append(m)\n",
        "  my_last_link = my_link + my_sublink[0] \n",
        "  # print(my_last_link)\n",
        "  my_links_sep2.append(my_last_link)\n",
        "  my_dates_sep2.append(i)\n",
        "\n",
        "print(my_links_sep2)  # uae this lst to collect the data later"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e5f4d697-7ed0-4517-f1a2-ba73ab2a5052",
        "id": "XhhXlakVumdG"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['https://www.ncei.noaa.gov/data/goes-space-environment-monitor/access/avg/2011/12/goes13/csv/g13_epead_p17ew_5m_20111201_20111231.csv']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_df_nsep = pd.DataFrame({'Link': my_links_sep2, 'SEP Date': my_dates_sep2})\n",
        "\n",
        "my_df_nsep"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "outputId": "08f405bc-de3c-4b68-dddd-f38a4ab78b5b",
        "id": "xLD5r9ymumdG"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                Link             SEP Date\n",
              "0  https://www.ncei.noaa.gov/data/goes-space-envi...  2011-12-25 18:10:00"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-905369e1-c4c2-42b2-b529-fca96ca5834e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Link</th>\n",
              "      <th>SEP Date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>https://www.ncei.noaa.gov/data/goes-space-envi...</td>\n",
              "      <td>2011-12-25 18:10:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-905369e1-c4c2-42b2-b529-fca96ca5834e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-905369e1-c4c2-42b2-b529-fca96ca5834e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-905369e1-c4c2-42b2-b529-fca96ca5834e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_df_nsep.to_csv('/content/SEP_list.csv', index=False)"
      ],
      "metadata": {
        "id": "q6hGD2jQumdG"
      },
      "execution_count": 90,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "my_dates_sep2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "88ebb17b-cac3-4625-db12-85bc184fcfa8",
        "id": "AF2273lZumdG"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['2011-12-25 18:10:00']"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "all_data = []\n",
        "index = 0\n",
        "dropped_indices = []\n",
        "for r in my_links_sep2:\n",
        "\n",
        "\n",
        "\n",
        "  if my_dates_sep2[index][0:4] < '1997':  # we have different column names after this date in GOES data :\\\n",
        "\n",
        "    data = pd.read_csv(r, sep=\"\\t\", names = ['p'])\n",
        "\n",
        "    data[['time_tag','e2_flux_ic','p1_flux','p2_flux','p3_flux','p4_flux','p5_flux','p6_flux','p7_flux',\n",
        "          'a1_flux','a2_flux','a3_flux','a4_flux','a5_flux','a6_flux','p1_flux_c','p2_flux_c','p3_flux_c',\n",
        "          'p4_flux_c','p5_flux_c','p6_flux_c','p7_flux_c','p1_flux_ic','p2_flux_ic','p3_flux_ic','p4_flux_ic',\n",
        "          'p5_flux_ic','p6_flux_ic','p7_flux_ic']] = data[\"p\"].apply(lambda x: pd.Series(str(x).split(\",\")))\n",
        "\n",
        "    data = data.drop(['p'], axis = 1)\n",
        "    \n",
        "\n",
        "    start_string = my_dates_sep2[index][0:7] + '-01' + ' ' + '00:00:00.000'  # defining the data start time of the csv file\n",
        "\n",
        "    x1 = data[data['time_tag'] == start_string]\n",
        "\n",
        "    y = x1.index # first time_tag\n",
        "\n",
        "    df1 = data.iloc[y[0]:]\n",
        "\n",
        "    df1 = df1.reset_index(drop = True)\n",
        "\n",
        "    flare_string = my_dates_sep2[index] + '.000'\n",
        "    p = df1[df1['time_tag'] == flare_string] # flare stert time. .. \n",
        "    q = p.index\n",
        "    #q[0] # flare start time index\n",
        "\n",
        "\n",
        "    span = 60                        # SPAN ... 60 --- observation window is 5 hours (60 values) before the flare start time!!!!!\n",
        "    df2 = df1.iloc[q[0]-span: q[0]]\n",
        "\n",
        "    if q[0]-y[0] < span:  # if the flare start time plus span is greater than the length of the csv file, drop the data\n",
        "      u = 5 # do nothing! or break!\n",
        "      dropped_indices.append(index)  \n",
        "    elif '-99999.0' in df2['p4_flux'].tolist() or '-99999.0' in df2['p5_flux'].tolist() or '-99999.0' in df2['p6_flux'].tolist(): # if there is missing value in selected data of span window of size span, drop the data\n",
        "      u = 5 # do nothing! or break!  \n",
        "      dropped_indices.append(index)  \n",
        "    else:\n",
        "      my_temp = df2['p6_flux'].append(df2['p5_flux'])\n",
        "      yyy = my_temp.append(df2['p4_flux'])\n",
        "      all_data.append(yyy)\n",
        "\n",
        "    index += 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "  elif my_dates_sep2[index][0:4] >= '1997' and my_dates_sep2[index][0:4] < '2011' :\n",
        "\n",
        "    data = pd.read_csv(r, sep=\"\\t\", names = ['p'])\n",
        "\n",
        "    data[['time_tag','e1_flux_ic','e2_flux_ic','e3_flux_ic','p1_flux','p2_flux','p3_flux','p4_flux','p5_flux',\n",
        "          'p6_flux','p7_flux','a1_flux','a2_flux','a3_flux','a4_flux','a5_flux','a6_flux','p1_flux_c','p2_flux_c',\n",
        "          'p3_flux_c','p4_flux_c','p5_flux_c','p6_flux_c','p7_flux_c','p1_flux_ic','p2_flux_ic','p3_flux_ic',\n",
        "          'p4_flux_ic','p5_flux_ic','p6_flux_ic','p7_flux_ic']] = data[\"p\"].apply(lambda x: pd.Series(str(x).split(\",\")))\n",
        "\n",
        "\n",
        "    data = data.drop(['p'], axis = 1)\n",
        "    \n",
        "\n",
        "    start_string = my_dates_sep2[index][0:7] + '-01' + ' ' + '00:00:00.000'  # defining the data start time of the csv file\n",
        "\n",
        "    x1 = data[data['time_tag'] == start_string]\n",
        "\n",
        "    y = x1.index # first time_tag\n",
        "\n",
        "    df1 = data.iloc[y[0]:]\n",
        "\n",
        "    df1 = df1.reset_index(drop = True)\n",
        "\n",
        "    flare_string = my_dates_sep2[index] + '.000'\n",
        "    p = df1[df1['time_tag'] == flare_string] # flare stert time. .. \n",
        "    q = p.index\n",
        "    #q[0] # flare start time index\n",
        "\n",
        "\n",
        "    span = 60                        # SPAN ... 60 --- observation window is 5 hours (60 values) before the flare start time!!!!!\n",
        "    # df2 = df1.iloc[q[0]:q[0]-span]\n",
        "    df2 = df1.iloc[q[0]-span: q[0]]\n",
        "    # if q[0]+span > len(df1):  # if the flare start time plus span is greater than the length of the csv file, drop the data\n",
        "    if q[0]-y[0] < span:  # if the flare start time minus span is less than the length of the csv file, drop the data\n",
        "      u = 5 # do nothing! or break!\n",
        "      dropped_indices.append(index)  \n",
        "    elif '-99999.0' in df2['p4_flux'].tolist() or '-99999.0' in df2['p5_flux'].tolist() or '-99999.0' in df2['p6_flux'].tolist(): # if there is missing value in selected data of span window of size span, drop the dat\n",
        "      u = 5 # do nothing! or break!  \n",
        "      dropped_indices.append(index)  \n",
        "    else:\n",
        "      my_temp = df2['p6_flux'].append(df2['p5_flux'])\n",
        "      yyy = my_temp.append(df2['p4_flux'])\n",
        "      all_data.append(yyy)\n",
        "\n",
        "    index += 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "  else:\n",
        "\n",
        "    data = pd.read_csv(r, sep=\"\\t\", names = ['p'])\n",
        "\n",
        "    data[['time_tag','P1E_NUM_PTS','P1E_QUAL_FLAG','P1E_UNCOR_FLUX','P1E_COR_FLUX','P1W_NUM_PTS','P1W_QUAL_FLAG','P1W_UNCOR_FLUX','P1W_COR_FLUX','P2E_NUM_PTS','P2E_QUAL_FLAG','P2E_UNCOR_FLUX','P2E_COR_FLUX','P2W_NUM_PTS','P2W_QUAL_FLAG','P2W_UNCOR_FLUX','P2W_COR_FLUX','P3E_NUM_PTS',\n",
        "          'P3E_QUAL_FLAG','P3E_UNCOR_FLUX','P3E_COR_FLUX','P3W_NUM_PTS','P3W_QUAL_FLAG','P3W_UNCOR_FLUX','P3W_COR_FLUX','P4E_NUM_PTS','P4E_QUAL_FLAG','P4E_UNCOR_FLUX','P4E_COR_FLUX','P4W_NUM_PTS','P4W_QUAL_FLAG','P4W_UNCOR_FLUX','P4W_COR_FLUX','P5E_NUM_PTS','P5E_QUAL_FLAG','P5E_UNCOR_FLUX',\n",
        "          'P5E_COR_FLUX','P5W_NUM_PTS','P5W_QUAL_FLAG','P5W_UNCOR_FLUX','P5W_COR_FLUX','P6E_NUM_PTS','P6E_QUAL_FLAG','P6E_UNCOR_FLUX','P6E_COR_FLUX','P6W_NUM_PTS','P6W_QUAL_FLAG','P6W_UNCOR_FLUX','P6W_COR_FLUX','P7E_NUM_PTS','P7E_QUAL_FLAG','P7E_UNCOR_FLUX','P7E_COR_FLUX','P7W_NUM_PTS',\n",
        "          'P7W_QUAL_FLAG','P7W_UNCOR_FLUX','P7W_COR_FLUX']] = data[\"p\"].apply(lambda x: pd.Series(str(x).split(\",\")))\n",
        "\n",
        "\n",
        "    data = data.drop(['p'], axis = 1)\n",
        "    \n",
        "\n",
        "    start_string = my_dates_sep2[index][0:7] + '-01' + ' ' + '00:00:00.000'  # defining the data start time of the csv file\n",
        "\n",
        "    x1 = data[data['time_tag'] == start_string]\n",
        "\n",
        "    y = x1.index # first time_tag\n",
        "\n",
        "    df1 = data.iloc[y[0]:]\n",
        "\n",
        "    df1 = df1.reset_index(drop = True)\n",
        "\n",
        "    flare_string = my_dates_sep2[index] + '.000'\n",
        "    p = df1[df1['time_tag'] == flare_string] # flare stert time. .. \n",
        "    q = p.index\n",
        "    #q[0] # flare start time index\n",
        "\n",
        "\n",
        "    span = 60                        # SPAN ... 60 --- observation window is 5 hours (60 values) before the flare start time!!!!!\n",
        "    # df2 = df1.iloc[q[0]:q[0]-span]\n",
        "    df2 = df1.iloc[q[0]-span: q[0]]\n",
        "    # if q[0]+span > len(df1):  # if the flare start time plus span is greater than the length of the csv file, drop the data\n",
        "    if q[0]-y[0] < span:  # if the flare start time minus span is less than the length of the csv file, drop the data\n",
        "      u = 5 # do nothing! or break!\n",
        "      dropped_indices.append(index)  \n",
        "    elif '-99999.0' in df2['P4W_UNCOR_FLUX'].tolist() or '-99999.0' in df2['P5W_UNCOR_FLUX'].tolist() or '-99999.0' in df2['P6W_UNCOR_FLUX'].tolist(): # if there is missing value in selected data of span window of size span, drop the dat\n",
        "      u = 5 # do nothing! or break!  \n",
        "      dropped_indices.append(index)  \n",
        "    else:\n",
        "      my_temp = df2['P6W_UNCOR_FLUX'].append(df2['P5W_UNCOR_FLUX'])\n",
        "      yyy = my_temp.append(df2['P4W_UNCOR_FLUX'])\n",
        "      all_data.append(yyy)\n",
        "\n",
        "    index += 1\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "089bdacb-d532-45c6-ac14-341828545f01",
        "id": "dvW6YQOYumdG"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-92-a473a5b3c43e>:144: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  my_temp = df2['P6W_UNCOR_FLUX'].append(df2['P5W_UNCOR_FLUX'])\n",
            "<ipython-input-92-a473a5b3c43e>:145: FutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  yyy = my_temp.append(df2['P4W_UNCOR_FLUX'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DF = pd.DataFrame()\n",
        "my = pd.Series(all_data)\n",
        "for sample,data in my.items():\n",
        "  c = data.reset_index(drop = True)\n",
        "  DF = DF.append(c,ignore_index=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "353c6468-62c4-422c-bf46-d0be4df5abe7",
        "id": "bWvEOIE3umdH"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-93-99feedb46e78>:5: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  DF = DF.append(c,ignore_index=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DF"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "45b24947-c3de-42d4-a2a3-2d881a97f91b",
        "id": "TmED5jUaumdH"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0           1           2           3           4           5    \\\n",
              "0  4.5054E-03  5.4200E-03  4.7764E-03  5.4878E-03  4.3360E-03  5.0813E-03   \n",
              "\n",
              "          6           7           8           9    ...         170  \\\n",
              "0  4.5054E-03  4.5393E-03  4.7764E-03  5.1152E-03  ...  1.6427E-02   \n",
              "\n",
              "          171         172         173         174         175         176  \\\n",
              "0  1.9055E-02  1.7741E-02  1.8398E-02  1.7084E-02  1.8398E-02  2.0369E-02   \n",
              "\n",
              "          177         178         179  \n",
              "0  2.2340E-02  1.9055E-02  1.9055E-02  \n",
              "\n",
              "[1 rows x 180 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4965dd85-9948-44d6-b9f9-ed0acf56b7c2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>170</th>\n",
              "      <th>171</th>\n",
              "      <th>172</th>\n",
              "      <th>173</th>\n",
              "      <th>174</th>\n",
              "      <th>175</th>\n",
              "      <th>176</th>\n",
              "      <th>177</th>\n",
              "      <th>178</th>\n",
              "      <th>179</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4.5054E-03</td>\n",
              "      <td>5.4200E-03</td>\n",
              "      <td>4.7764E-03</td>\n",
              "      <td>5.4878E-03</td>\n",
              "      <td>4.3360E-03</td>\n",
              "      <td>5.0813E-03</td>\n",
              "      <td>4.5054E-03</td>\n",
              "      <td>4.5393E-03</td>\n",
              "      <td>4.7764E-03</td>\n",
              "      <td>5.1152E-03</td>\n",
              "      <td>...</td>\n",
              "      <td>1.6427E-02</td>\n",
              "      <td>1.9055E-02</td>\n",
              "      <td>1.7741E-02</td>\n",
              "      <td>1.8398E-02</td>\n",
              "      <td>1.7084E-02</td>\n",
              "      <td>1.8398E-02</td>\n",
              "      <td>2.0369E-02</td>\n",
              "      <td>2.2340E-02</td>\n",
              "      <td>1.9055E-02</td>\n",
              "      <td>1.9055E-02</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows Ã— 180 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4965dd85-9948-44d6-b9f9-ed0acf56b7c2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4965dd85-9948-44d6-b9f9-ed0acf56b7c2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4965dd85-9948-44d6-b9f9-ed0acf56b7c2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DF.to_csv('/content/SEP_data_30MeV_one.csv', index=False)"
      ],
      "metadata": {
        "id": "YcWL825VumdH"
      },
      "execution_count": 95,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "c = pd.read_csv(\"/content/SEP_data_30MeV_one.csv\", header = 0)\n"
      ],
      "metadata": {
        "id": "HduBouJKumdH"
      },
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "c"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 174
        },
        "outputId": "dfe753d3-8c15-4e39-d8e0-467b8930eed5",
        "id": "2UliaHK8umdH"
      },
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0        1         2         3         4         5         6  \\\n",
              "0  0.004505  0.00542  0.004776  0.005488  0.004336  0.005081  0.004505   \n",
              "\n",
              "          7         8         9  ...       170       171       172       173  \\\n",
              "0  0.004539  0.004776  0.005115  ...  0.016427  0.019055  0.017741  0.018398   \n",
              "\n",
              "        174       175       176      177       178       179  \n",
              "0  0.017084  0.018398  0.020369  0.02234  0.019055  0.019055  \n",
              "\n",
              "[1 rows x 180 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3772914d-e30b-40f4-bae2-9ef184e5d0f2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>170</th>\n",
              "      <th>171</th>\n",
              "      <th>172</th>\n",
              "      <th>173</th>\n",
              "      <th>174</th>\n",
              "      <th>175</th>\n",
              "      <th>176</th>\n",
              "      <th>177</th>\n",
              "      <th>178</th>\n",
              "      <th>179</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.004505</td>\n",
              "      <td>0.00542</td>\n",
              "      <td>0.004776</td>\n",
              "      <td>0.005488</td>\n",
              "      <td>0.004336</td>\n",
              "      <td>0.005081</td>\n",
              "      <td>0.004505</td>\n",
              "      <td>0.004539</td>\n",
              "      <td>0.004776</td>\n",
              "      <td>0.005115</td>\n",
              "      <td>...</td>\n",
              "      <td>0.016427</td>\n",
              "      <td>0.019055</td>\n",
              "      <td>0.017741</td>\n",
              "      <td>0.018398</td>\n",
              "      <td>0.017084</td>\n",
              "      <td>0.018398</td>\n",
              "      <td>0.020369</td>\n",
              "      <td>0.02234</td>\n",
              "      <td>0.019055</td>\n",
              "      <td>0.019055</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows Ã— 180 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3772914d-e30b-40f4-bae2-9ef184e5d0f2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3772914d-e30b-40f4-bae2-9ef184e5d0f2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3772914d-e30b-40f4-bae2-9ef184e5d0f2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6u2mczR3yP6R"
      },
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "PSVWmwRWyP4b"
      },
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ZpD8jsqXyP2o"
      },
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "o1tV83gVumdH"
      },
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Visualization"
      ],
      "metadata": {
        "id": "-KeE5ih60OST"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def createList(r1, r2):\n",
        "    return list(range(r1, r2+1))\n",
        "     \n",
        "# Driver Code\n",
        "r1= 1\n",
        "r2 = 60\n",
        "# print(createList(r1, r2))\n",
        "my_indices = createList(r1, r2)"
      ],
      "metadata": {
        "id": "WGLswuCBA66e"
      },
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "NSEP__p6 = NSEP_.iloc[:, 0:60]\n",
        "NSEP__p5 = NSEP_.iloc[:, 60:120]\n",
        "NSEP__p4 = NSEP_.iloc[:, 120:180]"
      ],
      "metadata": {
        "id": "RuowzGMPA66f"
      },
      "execution_count": 99,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, NSEP__p6.T, color = 'Gray')\n",
        "plt.xlabel('Time', fontsize=10)\n",
        "plt.ylabel('Proton flux P6', fontsize=10)\n",
        "plt.title('Proton flux P6 did not lead to any SEP events', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 251
        },
        "outputId": "2837518a-20f2-4a8f-db7c-3819162f6f96",
        "id": "CgPrZtZ6A66g"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "iRcR1siXA66g"
      },
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, NSEP__p5.T, color = 'Gray')\n",
        "plt.xlabel('Time', fontsize=10)\n",
        "plt.ylabel('Proton flux P5', fontsize=10)\n",
        "plt.title('Proton flux P5 did not lead to any SEP events', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 251
        },
        "outputId": "ce8fa65e-965b-4083-da8e-5f97138f9c72",
        "id": "zI9S1tYUA66g"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "7MvYDJAMA66g"
      },
      "execution_count": 101,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, NSEP__p4.T, color = 'Gray')\n",
        "plt.xlabel('Time', fontsize=10)\n",
        "plt.ylabel('Proton flux P4', fontsize=10)\n",
        "plt.title('Proton flux P4 did not lead to any SEP events', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "outputId": "13529618-d71b-4dc5-8c7a-ee4ab3622657",
        "id": "Eom-SIS7A66g"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "igxWaYHfA66g"
      },
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GnkLgDz8BMj5"
      },
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "1gw9Ub_ABMhk"
      },
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "iRT5JMEhBMdd"
      },
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wlCw6Y9sA66h"
      },
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "fxflNA5bA66h"
      },
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def createList(r1, r2):\n",
        "    return list(range(r1, r2+1))\n",
        "     \n",
        "# Driver Code\n",
        "r1= 1\n",
        "r2 = 60\n",
        "# print(createList(r1, r2))\n",
        "my_indices = createList(r1, r2)"
      ],
      "metadata": {
        "id": "gHd77JxBumdH"
      },
      "execution_count": 103,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a_p6 = a.iloc[:, 0:60]\n",
        "a_p5 = a.iloc[:, 60:120]\n",
        "a_p4 = a.iloc[:, 120:180]"
      ],
      "metadata": {
        "id": "mALpyd6dxByj"
      },
      "execution_count": 104,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, a_p6.T, color = 'Green')\n",
        "plt.xlabel('Time', fontsize=10)\n",
        "plt.ylabel('Proton flux P6', fontsize=10)\n",
        "plt.title('Proton flux P6 causing 100 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "id": "1QT1oeNpumdH",
        "outputId": "d8fcb0d1-81db-4ed7-a529-a948ba89cd73"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-iA3WBY0yaky"
      },
      "execution_count": 105,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, a_p5.T, color = 'Green')\n",
        "plt.xlabel('Time', fontsize=10)\n",
        "plt.ylabel('Proton flux P5', fontsize=10)\n",
        "plt.title('Proton flux P5 causing 100 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "outputId": "0bb4250e-8deb-47ee-affe-b9017ed54b96",
        "id": "Vc_j2Fb0ybLu"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "IjTEkgKSyag6"
      },
      "execution_count": 106,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, a_p4.T, color = 'Green')\n",
        "plt.xlabel('Time', fontsize=10)\n",
        "plt.ylabel('Proton flux P4', fontsize=10)\n",
        "plt.title('Proton flux P4 causing 100 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "outputId": "42f053e0-cb60-4677-9d98-ce5797a377dc",
        "id": "_oalQLpnyl0q"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GUO3DRroyafF"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9Wr1yEuvyadQ"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "MdCRbePEyabK"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bQAIWwPoyaZW"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vnwq2KyRyaXj"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "g7WM3FaiyaV2"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def createList(r1, r2):\n",
        "    return list(range(r1, r2+1))\n",
        "     \n",
        "# Driver Code\n",
        "r1= 1\n",
        "r2 = 60\n",
        "# print(createList(r1, r2))\n",
        "my_indices = createList(r1, r2)"
      ],
      "metadata": {
        "id": "rPDxUY5eyylr"
      },
      "execution_count": 108,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "b_p6 = b.iloc[:, 0:60]\n",
        "b_p5 = b.iloc[:, 60:120]\n",
        "b_p4 = b.iloc[:, 120:180]"
      ],
      "metadata": {
        "id": "WlB23rAkyylr"
      },
      "execution_count": 109,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, b_p6.T, color = 'Green')\n",
        "plt.xlabel('Time', fontsize=10)\n",
        "plt.ylabel('Proton flux P6', fontsize=10)\n",
        "plt.title('Proton flux P6 causing 60 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 251
        },
        "outputId": "1403dd88-06c8-459b-abbd-1882d0c73ade",
        "id": "ZVTqIZv9yyls"
      },
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "PVdSmuuRyyls"
      },
      "execution_count": 110,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, b_p5.T, color = 'Green')\n",
        "plt.xlabel('Time', fontsize=10)\n",
        "plt.ylabel('Proton flux P5', fontsize=10)\n",
        "plt.title('Proton flux P5 causing 60 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "outputId": "c380f65b-5a50-435a-c083-998a44af9bef",
        "id": "ZUnyOqW0yyls"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "kooK4A35yyls"
      },
      "execution_count": 111,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, b_p4.T, color = 'Green')\n",
        "plt.xlabel('Time', fontsize=10)\n",
        "plt.ylabel('Proton flux P4', fontsize=10)\n",
        "plt.title('Proton flux P4 causing 60 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "outputId": "92ccff50-ffab-47e0-aaf8-4376841d19a1",
        "id": "8IGUEdiTyyls"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gBYCccqMyyls"
      },
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "T9B1BrTMyyls"
      },
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "OZxMFeDYyyls"
      },
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "coHMxf0Buiy_"
      },
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8Hwm8Gj2uivF"
      },
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9J9j6ZDSuipW"
      },
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def createList(r1, r2):\n",
        "    return list(range(r1, r2+1))\n",
        "     \n",
        "# Driver Code\n",
        "r1= 1\n",
        "r2 = 60\n",
        "# print(createList(r1, r2))\n",
        "my_indices = createList(r1, r2)"
      ],
      "metadata": {
        "id": "J72TIaUTzDcr"
      },
      "execution_count": 113,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "c_p6 = c.iloc[:, 0:60]\n",
        "c_p5 = c.iloc[:, 60:120]\n",
        "c_p4 = c.iloc[:, 120:180]"
      ],
      "metadata": {
        "id": "D88tViOJzDc4"
      },
      "execution_count": 114,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, c_p6.T, color = 'Green')\n",
        "plt.xlabel('Time', fontsize=10)\n",
        "plt.ylabel('Proton flux P6', fontsize=10)\n",
        "plt.title('Proton flux P6 causing 30 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "outputId": "fe04a4a4-444e-4d97-bb75-4a26e0730185",
        "id": "RFNK6eDPzDc4"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Un7cBhQqzDc4"
      },
      "execution_count": 115,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, c_p5.T, color = 'Green')\n",
        "plt.xlabel('Time', fontsize=10)\n",
        "plt.ylabel('Proton flux P5', fontsize=10)\n",
        "plt.title('Proton flux P5 causing 30 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "outputId": "5034bedd-2e67-40f7-a734-cd35791ce877",
        "id": "JTd6nzaXzDc4"
      },
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "UqPXdGAlzDc4"
      },
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, c_p4.T, color = 'Green')\n",
        "plt.xlabel('Time', fontsize=10)\n",
        "plt.ylabel('Proton flux P4', fontsize=10)\n",
        "plt.title('Proton flux P4 causing 30 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "outputId": "96dc5eb4-772b-49f3-f157-57402a52ab41",
        "id": "g3SOsXU0zDc4"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "iQpzzuWmzDc4"
      },
      "execution_count": 117,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "K97GEQt4zDc4"
      },
      "execution_count": 117,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "pXtoIynozDc4"
      },
      "execution_count": 117,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# DA Visualization"
      ],
      "metadata": {
        "id": "W2oHWpKIJZEq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Original TS"
      ],
      "metadata": {
        "id": "u9M_kjfQPGG8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "JH4sWMBcNHnG"
      },
      "execution_count": 118,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 119,
      "metadata": {
        "id": "AkCyu4lOC3Mb"
      },
      "outputs": [],
      "source": [
        "SEP_df_1 = pd.read_csv(\"/content/sample_data/SEP_data.csv\", header = 0)\n",
        "# SEP_df_1 = SEP_df_1.drop([78, 79, 80, 81])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 120,
      "metadata": {
        "id": "Z47F-gJKi1hV"
      },
      "outputs": [],
      "source": [
        "NSEP_df_156 = pd.read_csv(\"/content/sample_data/NSEP_data_156.csv\", header = 0)\n",
        "# NSEP_df_156 = NSEP_df_156.drop([78, 79, 80, 80])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "temp_ts1 = SEP_df_1.iloc[0]\n",
        "original_ts = temp_ts1.to_frame()"
      ],
      "metadata": {
        "id": "2yyUyuVWNZ1d"
      },
      "execution_count": 121,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, original_ts, color = 'Red')\n",
        "\n",
        "# Remove the top and right spines\n",
        "plt.gca().spines['top'].set_visible(False)\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['bottom'].set_visible(False)\n",
        "plt.gca().spines['left'].set_visible(False)\n",
        "\n",
        "# Remove the left and bottom ticks\n",
        "plt.gca().tick_params(left=False, bottom=False, top=False, right=False)\n",
        "\n",
        "# Set the ticks position to 'out'\n",
        "plt.gca().tick_params(axis='both', direction='out')\n",
        "\n",
        "\n",
        "# Remove the tick labels on both axes\n",
        "plt.gca().set_xticklabels([])\n",
        "plt.gca().set_yticklabels([])\n",
        "\n",
        "# plt.xlabel('Time', fontsize=10)\n",
        "# plt.ylabel('Proton flux P6', fontsize=10)\n",
        "# plt.title('Proton flux P6 causing 100 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Lzet6gvWNjuk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "373bf9ec-5c1e-450c-8192-d6ecb5c08bc0"
      },
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "XpS2SmuTOJYh"
      },
      "execution_count": 122,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Gaussian"
      ],
      "metadata": {
        "id": "JMq0ucPaWUSU"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 123,
      "metadata": {
        "id": "xRmT6ABui1fA"
      },
      "outputs": [],
      "source": [
        "def DA_Jitter(X, sigma, p):  # 0.00089  or  0.03  or 0.0002\n",
        "    R = np.random.RandomState(p)\n",
        "    myNoise = R.normal(loc=0, scale=sigma, size=X.shape)\n",
        "    return X+myNoise"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 124,
      "metadata": {
        "id": "Xp13jI1Y93xL"
      },
      "outputs": [],
      "source": [
        "SEP_df_2 = DA_Jitter(SEP_df_1, 0.0002, 2)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "temp_ts2 = SEP_df_2.iloc[0]\n",
        "Gaussian_DA_ts = temp_ts2.to_frame()"
      ],
      "metadata": {
        "id": "Xo_RUXowOqkx"
      },
      "execution_count": 125,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, Gaussian_DA_ts, color = 'Gold')\n",
        "\n",
        "# Remove the top and right spines\n",
        "plt.gca().spines['top'].set_visible(False)\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['bottom'].set_visible(False)\n",
        "plt.gca().spines['left'].set_visible(False)\n",
        "\n",
        "# Remove the left and bottom ticks\n",
        "plt.gca().tick_params(left=False, bottom=False, top=False, right=False)\n",
        "\n",
        "# Set the ticks position to 'out'\n",
        "plt.gca().tick_params(axis='both', direction='out')\n",
        "\n",
        "\n",
        "# Remove the tick labels on both axes\n",
        "plt.gca().set_xticklabels([])\n",
        "plt.gca().set_yticklabels([])\n",
        "\n",
        "# plt.xlabel('Time', fontsize=10)\n",
        "# plt.ylabel('Proton flux P6', fontsize=10)\n",
        "# plt.title('Proton flux P6 causing 100 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "id": "7KNQhrvQOk0N",
        "outputId": "3e119439-8d4f-4c5e-e258-a6358e86428e"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bzwxmq7jOyJL"
      },
      "execution_count": 126,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "zuwQtrLFPBYW"
      },
      "execution_count": 126,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### SMOTE"
      ],
      "metadata": {
        "id": "APY5-Ne0PBwC"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 127,
      "metadata": {
        "id": "6JnCS2cAwgtz"
      },
      "outputs": [],
      "source": [
        "from imblearn.over_sampling import SMOTE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 128,
      "metadata": {
        "id": "-HM59_b_TcM_"
      },
      "outputs": [],
      "source": [
        "SEP_df_1 = pd.read_csv(\"/content/sample_data/SEP_data.csv\", header = 0)\n",
        "# SEP_df_1 = SEP_df_1.drop([78, 79, 80, 81])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 129,
      "metadata": {
        "id": "kglkBoLETcNA"
      },
      "outputs": [],
      "source": [
        "NSEP_df_156 = pd.read_csv(\"/content/sample_data/NSEP_data_156.csv\", header = 0)\n",
        "# NSEP_df_156 = NSEP_df_156.drop([78, 79, 80, 80])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 130,
      "metadata": {
        "id": "ZonrhJBZwgt0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "da2df84d-fcef-4a91-b15f-052335d07bfe"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-130-4d9ede283d3d>:1: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  data = SEP_df_1.append(NSEP_df_156) # append the two SEP and NSEP dataframes\n"
          ]
        }
      ],
      "source": [
        "data = SEP_df_1.append(NSEP_df_156) # append the two SEP and NSEP dataframes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 131,
      "metadata": {
        "id": "kax-i3l0wgt0"
      },
      "outputs": [],
      "source": [
        "data = data.reset_index(drop = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 132,
      "metadata": {
        "id": "KJYhFtTLwgt0"
      },
      "outputs": [],
      "source": [
        "NSEP_start_index = len(SEP_df_1) + 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 133,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "outputId": "174acf25-147a-4fca-fab3-1ec391c90553",
        "id": "Jwnt4W6pwgt0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           0        1        2        3        4        5        6        7  \\\n",
              "0    0.00355  0.00312  0.00295  0.00356  0.00406  0.00288  0.00305  0.00336   \n",
              "1    0.00902  0.00851  0.00771  0.00828  0.00736  0.00716  0.00785  0.00793   \n",
              "2    0.00285  0.00284  0.00300  0.00288  0.00310  0.00264  0.00290  0.00255   \n",
              "3    0.00265  0.00303  0.00295  0.00336  0.00285  0.00303  0.00310  0.00269   \n",
              "4    0.00345  0.00308  0.00411  0.00346  0.00350  0.00375  0.00355  0.00360   \n",
              "..       ...      ...      ...      ...      ...      ...      ...      ...   \n",
              "274  0.00154  0.00210  0.00192  0.00220  0.00211  0.00195  0.00231  0.00185   \n",
              "275  0.00192  0.00200  0.00173  0.00215  0.00178  0.00205  0.00255  0.00195   \n",
              "276  0.00195  0.00192  0.00160  0.00202  0.00170  0.00197  0.00170  0.00231   \n",
              "277  0.00250  0.00185  0.00240  0.00265  0.00211  0.00195  0.00163  0.00226   \n",
              "278  0.00215  0.00231  0.00170  0.00154  0.00180  0.00221  0.00180  0.00168   \n",
              "\n",
              "           8        9  ...       51       52       53       54       55  \\\n",
              "0    0.00340  0.00303  ...  0.00325  0.00336  0.00305  0.00312  0.00300   \n",
              "1    0.00726  0.00984  ...  0.00690  0.00701  0.00697  0.00668  0.00697   \n",
              "2    0.00215  0.00231  ...  0.00275  0.00255  0.00300  0.00226  0.00280   \n",
              "3    0.00205  0.00346  ...  0.00310  0.00360  0.00235  0.00327  0.00260   \n",
              "4    0.00335  0.00351  ...  0.00355  0.00389  0.00406  0.00351  0.00335   \n",
              "..       ...      ...  ...      ...      ...      ...      ...      ...   \n",
              "274  0.00192  0.00216  ...  0.00178  0.00185  0.00197  0.00250  0.00274   \n",
              "275  0.00149  0.00215  ...  0.00221  0.00155  0.00226  0.00245  0.00216   \n",
              "276  0.00265  0.00183  ...  0.00160  0.00168  0.00235  0.00216  0.00205   \n",
              "277  0.00170  0.00235  ...  0.00173  0.00260  0.00192  0.00260  0.00207   \n",
              "278  0.00250  0.00139  ...  0.00235  0.00216  0.00195  0.00264  0.00245   \n",
              "\n",
              "          56       57       58       59  event  \n",
              "0    0.00327  0.00235  0.00288  0.00310    SEP  \n",
              "1    0.00789  0.00776  0.00706  0.00716    SEP  \n",
              "2    0.00298  0.00270  0.00274  0.00255    SEP  \n",
              "3    0.00255  0.00285  0.00298  0.00290    SEP  \n",
              "4    0.00356  0.00315  0.00327  0.00330    SEP  \n",
              "..       ...      ...      ...      ...    ...  \n",
              "274  0.00210  0.00183  0.00202  0.00230   NSEP  \n",
              "275  0.00220  0.00187  0.00220  0.00183   NSEP  \n",
              "276  0.00221  0.00185  0.00231  0.00185   NSEP  \n",
              "277  0.00197  0.00210  0.00226  0.00265   NSEP  \n",
              "278  0.00284  0.00260  0.00250  0.00275   NSEP  \n",
              "\n",
              "[279 rows x 61 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-91dc4d2d-70e1-4c4f-b85a-e24ab4978560\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>51</th>\n",
              "      <th>52</th>\n",
              "      <th>53</th>\n",
              "      <th>54</th>\n",
              "      <th>55</th>\n",
              "      <th>56</th>\n",
              "      <th>57</th>\n",
              "      <th>58</th>\n",
              "      <th>59</th>\n",
              "      <th>event</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.00355</td>\n",
              "      <td>0.00312</td>\n",
              "      <td>0.00295</td>\n",
              "      <td>0.00356</td>\n",
              "      <td>0.00406</td>\n",
              "      <td>0.00288</td>\n",
              "      <td>0.00305</td>\n",
              "      <td>0.00336</td>\n",
              "      <td>0.00340</td>\n",
              "      <td>0.00303</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00325</td>\n",
              "      <td>0.00336</td>\n",
              "      <td>0.00305</td>\n",
              "      <td>0.00312</td>\n",
              "      <td>0.00300</td>\n",
              "      <td>0.00327</td>\n",
              "      <td>0.00235</td>\n",
              "      <td>0.00288</td>\n",
              "      <td>0.00310</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.00902</td>\n",
              "      <td>0.00851</td>\n",
              "      <td>0.00771</td>\n",
              "      <td>0.00828</td>\n",
              "      <td>0.00736</td>\n",
              "      <td>0.00716</td>\n",
              "      <td>0.00785</td>\n",
              "      <td>0.00793</td>\n",
              "      <td>0.00726</td>\n",
              "      <td>0.00984</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00690</td>\n",
              "      <td>0.00701</td>\n",
              "      <td>0.00697</td>\n",
              "      <td>0.00668</td>\n",
              "      <td>0.00697</td>\n",
              "      <td>0.00789</td>\n",
              "      <td>0.00776</td>\n",
              "      <td>0.00706</td>\n",
              "      <td>0.00716</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.00285</td>\n",
              "      <td>0.00284</td>\n",
              "      <td>0.00300</td>\n",
              "      <td>0.00288</td>\n",
              "      <td>0.00310</td>\n",
              "      <td>0.00264</td>\n",
              "      <td>0.00290</td>\n",
              "      <td>0.00255</td>\n",
              "      <td>0.00215</td>\n",
              "      <td>0.00231</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00275</td>\n",
              "      <td>0.00255</td>\n",
              "      <td>0.00300</td>\n",
              "      <td>0.00226</td>\n",
              "      <td>0.00280</td>\n",
              "      <td>0.00298</td>\n",
              "      <td>0.00270</td>\n",
              "      <td>0.00274</td>\n",
              "      <td>0.00255</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.00265</td>\n",
              "      <td>0.00303</td>\n",
              "      <td>0.00295</td>\n",
              "      <td>0.00336</td>\n",
              "      <td>0.00285</td>\n",
              "      <td>0.00303</td>\n",
              "      <td>0.00310</td>\n",
              "      <td>0.00269</td>\n",
              "      <td>0.00205</td>\n",
              "      <td>0.00346</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00310</td>\n",
              "      <td>0.00360</td>\n",
              "      <td>0.00235</td>\n",
              "      <td>0.00327</td>\n",
              "      <td>0.00260</td>\n",
              "      <td>0.00255</td>\n",
              "      <td>0.00285</td>\n",
              "      <td>0.00298</td>\n",
              "      <td>0.00290</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.00345</td>\n",
              "      <td>0.00308</td>\n",
              "      <td>0.00411</td>\n",
              "      <td>0.00346</td>\n",
              "      <td>0.00350</td>\n",
              "      <td>0.00375</td>\n",
              "      <td>0.00355</td>\n",
              "      <td>0.00360</td>\n",
              "      <td>0.00335</td>\n",
              "      <td>0.00351</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00355</td>\n",
              "      <td>0.00389</td>\n",
              "      <td>0.00406</td>\n",
              "      <td>0.00351</td>\n",
              "      <td>0.00335</td>\n",
              "      <td>0.00356</td>\n",
              "      <td>0.00315</td>\n",
              "      <td>0.00327</td>\n",
              "      <td>0.00330</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>274</th>\n",
              "      <td>0.00154</td>\n",
              "      <td>0.00210</td>\n",
              "      <td>0.00192</td>\n",
              "      <td>0.00220</td>\n",
              "      <td>0.00211</td>\n",
              "      <td>0.00195</td>\n",
              "      <td>0.00231</td>\n",
              "      <td>0.00185</td>\n",
              "      <td>0.00192</td>\n",
              "      <td>0.00216</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00178</td>\n",
              "      <td>0.00185</td>\n",
              "      <td>0.00197</td>\n",
              "      <td>0.00250</td>\n",
              "      <td>0.00274</td>\n",
              "      <td>0.00210</td>\n",
              "      <td>0.00183</td>\n",
              "      <td>0.00202</td>\n",
              "      <td>0.00230</td>\n",
              "      <td>NSEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>275</th>\n",
              "      <td>0.00192</td>\n",
              "      <td>0.00200</td>\n",
              "      <td>0.00173</td>\n",
              "      <td>0.00215</td>\n",
              "      <td>0.00178</td>\n",
              "      <td>0.00205</td>\n",
              "      <td>0.00255</td>\n",
              "      <td>0.00195</td>\n",
              "      <td>0.00149</td>\n",
              "      <td>0.00215</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00221</td>\n",
              "      <td>0.00155</td>\n",
              "      <td>0.00226</td>\n",
              "      <td>0.00245</td>\n",
              "      <td>0.00216</td>\n",
              "      <td>0.00220</td>\n",
              "      <td>0.00187</td>\n",
              "      <td>0.00220</td>\n",
              "      <td>0.00183</td>\n",
              "      <td>NSEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>276</th>\n",
              "      <td>0.00195</td>\n",
              "      <td>0.00192</td>\n",
              "      <td>0.00160</td>\n",
              "      <td>0.00202</td>\n",
              "      <td>0.00170</td>\n",
              "      <td>0.00197</td>\n",
              "      <td>0.00170</td>\n",
              "      <td>0.00231</td>\n",
              "      <td>0.00265</td>\n",
              "      <td>0.00183</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00160</td>\n",
              "      <td>0.00168</td>\n",
              "      <td>0.00235</td>\n",
              "      <td>0.00216</td>\n",
              "      <td>0.00205</td>\n",
              "      <td>0.00221</td>\n",
              "      <td>0.00185</td>\n",
              "      <td>0.00231</td>\n",
              "      <td>0.00185</td>\n",
              "      <td>NSEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>277</th>\n",
              "      <td>0.00250</td>\n",
              "      <td>0.00185</td>\n",
              "      <td>0.00240</td>\n",
              "      <td>0.00265</td>\n",
              "      <td>0.00211</td>\n",
              "      <td>0.00195</td>\n",
              "      <td>0.00163</td>\n",
              "      <td>0.00226</td>\n",
              "      <td>0.00170</td>\n",
              "      <td>0.00235</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00173</td>\n",
              "      <td>0.00260</td>\n",
              "      <td>0.00192</td>\n",
              "      <td>0.00260</td>\n",
              "      <td>0.00207</td>\n",
              "      <td>0.00197</td>\n",
              "      <td>0.00210</td>\n",
              "      <td>0.00226</td>\n",
              "      <td>0.00265</td>\n",
              "      <td>NSEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>278</th>\n",
              "      <td>0.00215</td>\n",
              "      <td>0.00231</td>\n",
              "      <td>0.00170</td>\n",
              "      <td>0.00154</td>\n",
              "      <td>0.00180</td>\n",
              "      <td>0.00221</td>\n",
              "      <td>0.00180</td>\n",
              "      <td>0.00168</td>\n",
              "      <td>0.00250</td>\n",
              "      <td>0.00139</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00235</td>\n",
              "      <td>0.00216</td>\n",
              "      <td>0.00195</td>\n",
              "      <td>0.00264</td>\n",
              "      <td>0.00245</td>\n",
              "      <td>0.00284</td>\n",
              "      <td>0.00260</td>\n",
              "      <td>0.00250</td>\n",
              "      <td>0.00275</td>\n",
              "      <td>NSEP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>279 rows Ã— 61 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91dc4d2d-70e1-4c4f-b85a-e24ab4978560')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-91dc4d2d-70e1-4c4f-b85a-e24ab4978560 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-91dc4d2d-70e1-4c4f-b85a-e24ab4978560');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 133
        }
      ],
      "source": [
        "data['event'] = 'SEP'\n",
        "data.loc[NSEP_start_index:,['event']] = 'NSEP'\n",
        "my_data_all = data\n",
        "my_data_all"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "oversample = SMOTE(random_state = 42)\n",
        "X, y = oversample.fit_resample(my_data_all.iloc[:, 0:60], my_data_all.iloc[:, -1])"
      ],
      "metadata": {
        "id": "2vs8QeINwgt0"
      },
      "execution_count": 134,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# y[234:] = 'Synthetic SEP'\n",
        "# y\n",
        "\n",
        "y[279:] = 'Synthetic SEP'\n",
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-8wxwZs0vqd9",
        "outputId": "1539b743-4b63-4f94-8b4c-8f34457fa8d8"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0                SEP\n",
              "1                SEP\n",
              "2                SEP\n",
              "3                SEP\n",
              "4                SEP\n",
              "           ...      \n",
              "365    Synthetic SEP\n",
              "366    Synthetic SEP\n",
              "367    Synthetic SEP\n",
              "368    Synthetic SEP\n",
              "369    Synthetic SEP\n",
              "Name: event, Length: 370, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "out = X.copy()\n",
        "out['event'] = y\n",
        "out"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "outputId": "89b85f99-5de2-4beb-e741-976aa3272472",
        "id": "DJNaRN2FxTyT"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            0         1         2         3         4         5         6  \\\n",
              "0    0.003550  0.003120  0.002950  0.003560  0.004060  0.002880  0.003050   \n",
              "1    0.009020  0.008510  0.007710  0.008280  0.007360  0.007160  0.007850   \n",
              "2    0.002850  0.002840  0.003000  0.002880  0.003100  0.002640  0.002900   \n",
              "3    0.002650  0.003030  0.002950  0.003360  0.002850  0.003030  0.003100   \n",
              "4    0.003450  0.003080  0.004110  0.003460  0.003500  0.003750  0.003550   \n",
              "..        ...       ...       ...       ...       ...       ...       ...   \n",
              "365  0.018513  0.019219  0.018319  0.017067  0.017397  0.017227  0.016172   \n",
              "366  0.002715  0.002527  0.002489  0.002236  0.002716  0.001820  0.002715   \n",
              "367  0.002434  0.002135  0.002216  0.002602  0.003139  0.002842  0.002199   \n",
              "368  0.002418  0.002121  0.002202  0.002615  0.003126  0.002812  0.002226   \n",
              "369  0.002525  0.002982  0.002857  0.002846  0.002758  0.003123  0.002672   \n",
              "\n",
              "            7         8         9  ...        51        52        53  \\\n",
              "0    0.003360  0.003400  0.003030  ...  0.003250  0.003360  0.003050   \n",
              "1    0.007930  0.007260  0.009840  ...  0.006900  0.007010  0.006970   \n",
              "2    0.002550  0.002150  0.002310  ...  0.002750  0.002550  0.003000   \n",
              "3    0.002690  0.002050  0.003460  ...  0.003100  0.003600  0.002350   \n",
              "4    0.003600  0.003350  0.003510  ...  0.003550  0.003890  0.004060   \n",
              "..        ...       ...       ...  ...       ...       ...       ...   \n",
              "365  0.016688  0.015910  0.016180  ...  0.014694  0.015978  0.014841   \n",
              "366  0.002140  0.001964  0.002826  ...  0.002820  0.002592  0.002375   \n",
              "367  0.002779  0.002562  0.002980  ...  0.002981  0.001986  0.001899   \n",
              "368  0.002773  0.002533  0.002998  ...  0.002958  0.001997  0.001917   \n",
              "369  0.003372  0.003227  0.003070  ...  0.003028  0.003448  0.002352   \n",
              "\n",
              "           54        55        56        57        58        59          event  \n",
              "0    0.003120  0.003000  0.003270  0.002350  0.002880  0.003100            SEP  \n",
              "1    0.006680  0.006970  0.007890  0.007760  0.007060  0.007160            SEP  \n",
              "2    0.002260  0.002800  0.002980  0.002700  0.002740  0.002550            SEP  \n",
              "3    0.003270  0.002600  0.002550  0.002850  0.002980  0.002900            SEP  \n",
              "4    0.003510  0.003350  0.003560  0.003150  0.003270  0.003300            SEP  \n",
              "..        ...       ...       ...       ...       ...       ...            ...  \n",
              "365  0.014867  0.015030  0.015327  0.016642  0.015384  0.014727  Synthetic SEP  \n",
              "366  0.002444  0.002176  0.002881  0.002361  0.002485  0.002377  Synthetic SEP  \n",
              "367  0.002844  0.002782  0.002684  0.002129  0.002698  0.002305  Synthetic SEP  \n",
              "368  0.002838  0.002782  0.002685  0.002108  0.002688  0.002317  Synthetic SEP  \n",
              "369  0.002390  0.002989  0.003519  0.002636  0.002317  0.002351  Synthetic SEP  \n",
              "\n",
              "[370 rows x 61 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f2f12187-1748-41f9-aa31-0531519ea3b7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>51</th>\n",
              "      <th>52</th>\n",
              "      <th>53</th>\n",
              "      <th>54</th>\n",
              "      <th>55</th>\n",
              "      <th>56</th>\n",
              "      <th>57</th>\n",
              "      <th>58</th>\n",
              "      <th>59</th>\n",
              "      <th>event</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.003550</td>\n",
              "      <td>0.003120</td>\n",
              "      <td>0.002950</td>\n",
              "      <td>0.003560</td>\n",
              "      <td>0.004060</td>\n",
              "      <td>0.002880</td>\n",
              "      <td>0.003050</td>\n",
              "      <td>0.003360</td>\n",
              "      <td>0.003400</td>\n",
              "      <td>0.003030</td>\n",
              "      <td>...</td>\n",
              "      <td>0.003250</td>\n",
              "      <td>0.003360</td>\n",
              "      <td>0.003050</td>\n",
              "      <td>0.003120</td>\n",
              "      <td>0.003000</td>\n",
              "      <td>0.003270</td>\n",
              "      <td>0.002350</td>\n",
              "      <td>0.002880</td>\n",
              "      <td>0.003100</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.009020</td>\n",
              "      <td>0.008510</td>\n",
              "      <td>0.007710</td>\n",
              "      <td>0.008280</td>\n",
              "      <td>0.007360</td>\n",
              "      <td>0.007160</td>\n",
              "      <td>0.007850</td>\n",
              "      <td>0.007930</td>\n",
              "      <td>0.007260</td>\n",
              "      <td>0.009840</td>\n",
              "      <td>...</td>\n",
              "      <td>0.006900</td>\n",
              "      <td>0.007010</td>\n",
              "      <td>0.006970</td>\n",
              "      <td>0.006680</td>\n",
              "      <td>0.006970</td>\n",
              "      <td>0.007890</td>\n",
              "      <td>0.007760</td>\n",
              "      <td>0.007060</td>\n",
              "      <td>0.007160</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.002850</td>\n",
              "      <td>0.002840</td>\n",
              "      <td>0.003000</td>\n",
              "      <td>0.002880</td>\n",
              "      <td>0.003100</td>\n",
              "      <td>0.002640</td>\n",
              "      <td>0.002900</td>\n",
              "      <td>0.002550</td>\n",
              "      <td>0.002150</td>\n",
              "      <td>0.002310</td>\n",
              "      <td>...</td>\n",
              "      <td>0.002750</td>\n",
              "      <td>0.002550</td>\n",
              "      <td>0.003000</td>\n",
              "      <td>0.002260</td>\n",
              "      <td>0.002800</td>\n",
              "      <td>0.002980</td>\n",
              "      <td>0.002700</td>\n",
              "      <td>0.002740</td>\n",
              "      <td>0.002550</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.002650</td>\n",
              "      <td>0.003030</td>\n",
              "      <td>0.002950</td>\n",
              "      <td>0.003360</td>\n",
              "      <td>0.002850</td>\n",
              "      <td>0.003030</td>\n",
              "      <td>0.003100</td>\n",
              "      <td>0.002690</td>\n",
              "      <td>0.002050</td>\n",
              "      <td>0.003460</td>\n",
              "      <td>...</td>\n",
              "      <td>0.003100</td>\n",
              "      <td>0.003600</td>\n",
              "      <td>0.002350</td>\n",
              "      <td>0.003270</td>\n",
              "      <td>0.002600</td>\n",
              "      <td>0.002550</td>\n",
              "      <td>0.002850</td>\n",
              "      <td>0.002980</td>\n",
              "      <td>0.002900</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.003450</td>\n",
              "      <td>0.003080</td>\n",
              "      <td>0.004110</td>\n",
              "      <td>0.003460</td>\n",
              "      <td>0.003500</td>\n",
              "      <td>0.003750</td>\n",
              "      <td>0.003550</td>\n",
              "      <td>0.003600</td>\n",
              "      <td>0.003350</td>\n",
              "      <td>0.003510</td>\n",
              "      <td>...</td>\n",
              "      <td>0.003550</td>\n",
              "      <td>0.003890</td>\n",
              "      <td>0.004060</td>\n",
              "      <td>0.003510</td>\n",
              "      <td>0.003350</td>\n",
              "      <td>0.003560</td>\n",
              "      <td>0.003150</td>\n",
              "      <td>0.003270</td>\n",
              "      <td>0.003300</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>365</th>\n",
              "      <td>0.018513</td>\n",
              "      <td>0.019219</td>\n",
              "      <td>0.018319</td>\n",
              "      <td>0.017067</td>\n",
              "      <td>0.017397</td>\n",
              "      <td>0.017227</td>\n",
              "      <td>0.016172</td>\n",
              "      <td>0.016688</td>\n",
              "      <td>0.015910</td>\n",
              "      <td>0.016180</td>\n",
              "      <td>...</td>\n",
              "      <td>0.014694</td>\n",
              "      <td>0.015978</td>\n",
              "      <td>0.014841</td>\n",
              "      <td>0.014867</td>\n",
              "      <td>0.015030</td>\n",
              "      <td>0.015327</td>\n",
              "      <td>0.016642</td>\n",
              "      <td>0.015384</td>\n",
              "      <td>0.014727</td>\n",
              "      <td>Synthetic SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>366</th>\n",
              "      <td>0.002715</td>\n",
              "      <td>0.002527</td>\n",
              "      <td>0.002489</td>\n",
              "      <td>0.002236</td>\n",
              "      <td>0.002716</td>\n",
              "      <td>0.001820</td>\n",
              "      <td>0.002715</td>\n",
              "      <td>0.002140</td>\n",
              "      <td>0.001964</td>\n",
              "      <td>0.002826</td>\n",
              "      <td>...</td>\n",
              "      <td>0.002820</td>\n",
              "      <td>0.002592</td>\n",
              "      <td>0.002375</td>\n",
              "      <td>0.002444</td>\n",
              "      <td>0.002176</td>\n",
              "      <td>0.002881</td>\n",
              "      <td>0.002361</td>\n",
              "      <td>0.002485</td>\n",
              "      <td>0.002377</td>\n",
              "      <td>Synthetic SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>367</th>\n",
              "      <td>0.002434</td>\n",
              "      <td>0.002135</td>\n",
              "      <td>0.002216</td>\n",
              "      <td>0.002602</td>\n",
              "      <td>0.003139</td>\n",
              "      <td>0.002842</td>\n",
              "      <td>0.002199</td>\n",
              "      <td>0.002779</td>\n",
              "      <td>0.002562</td>\n",
              "      <td>0.002980</td>\n",
              "      <td>...</td>\n",
              "      <td>0.002981</td>\n",
              "      <td>0.001986</td>\n",
              "      <td>0.001899</td>\n",
              "      <td>0.002844</td>\n",
              "      <td>0.002782</td>\n",
              "      <td>0.002684</td>\n",
              "      <td>0.002129</td>\n",
              "      <td>0.002698</td>\n",
              "      <td>0.002305</td>\n",
              "      <td>Synthetic SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>368</th>\n",
              "      <td>0.002418</td>\n",
              "      <td>0.002121</td>\n",
              "      <td>0.002202</td>\n",
              "      <td>0.002615</td>\n",
              "      <td>0.003126</td>\n",
              "      <td>0.002812</td>\n",
              "      <td>0.002226</td>\n",
              "      <td>0.002773</td>\n",
              "      <td>0.002533</td>\n",
              "      <td>0.002998</td>\n",
              "      <td>...</td>\n",
              "      <td>0.002958</td>\n",
              "      <td>0.001997</td>\n",
              "      <td>0.001917</td>\n",
              "      <td>0.002838</td>\n",
              "      <td>0.002782</td>\n",
              "      <td>0.002685</td>\n",
              "      <td>0.002108</td>\n",
              "      <td>0.002688</td>\n",
              "      <td>0.002317</td>\n",
              "      <td>Synthetic SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>369</th>\n",
              "      <td>0.002525</td>\n",
              "      <td>0.002982</td>\n",
              "      <td>0.002857</td>\n",
              "      <td>0.002846</td>\n",
              "      <td>0.002758</td>\n",
              "      <td>0.003123</td>\n",
              "      <td>0.002672</td>\n",
              "      <td>0.003372</td>\n",
              "      <td>0.003227</td>\n",
              "      <td>0.003070</td>\n",
              "      <td>...</td>\n",
              "      <td>0.003028</td>\n",
              "      <td>0.003448</td>\n",
              "      <td>0.002352</td>\n",
              "      <td>0.002390</td>\n",
              "      <td>0.002989</td>\n",
              "      <td>0.003519</td>\n",
              "      <td>0.002636</td>\n",
              "      <td>0.002317</td>\n",
              "      <td>0.002351</td>\n",
              "      <td>Synthetic SEP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>370 rows Ã— 61 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f2f12187-1748-41f9-aa31-0531519ea3b7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f2f12187-1748-41f9-aa31-0531519ea3b7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f2f12187-1748-41f9-aa31-0531519ea3b7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "XX = out.iloc[:, 0:60]"
      ],
      "metadata": {
        "id": "zQwA9uvFxTyT"
      },
      "execution_count": 137,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# augmented_data = augmented_data.drop(columns=['event'], axis=1)"
      ],
      "metadata": {
        "id": "qSY4BKvTQBL8"
      },
      "execution_count": 138,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "temp_ts_SMOTE = XX.iloc[279]\n",
        "SMOTE_DA_ts = temp_ts_SMOTE.to_frame()"
      ],
      "metadata": {
        "id": "ar-swv7jQUDx"
      },
      "execution_count": 139,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, SMOTE_DA_ts, color = 'Gold')\n",
        "\n",
        "# Remove the top and right spines\n",
        "plt.gca().spines['top'].set_visible(False)\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['bottom'].set_visible(False)\n",
        "plt.gca().spines['left'].set_visible(False)\n",
        "\n",
        "# Remove the left and bottom ticks\n",
        "plt.gca().tick_params(left=False, bottom=False, top=False, right=False)\n",
        "\n",
        "# Set the ticks position to 'out'\n",
        "plt.gca().tick_params(axis='both', direction='out')\n",
        "\n",
        "\n",
        "# Remove the tick labels on both axes\n",
        "plt.gca().set_xticklabels([])\n",
        "plt.gca().set_yticklabels([])\n",
        "\n",
        "# plt.xlabel('Time', fontsize=10)\n",
        "# plt.ylabel('Proton flux P6', fontsize=10)\n",
        "# plt.title('Proton flux P6 causing 100 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "87b005fd-83c9-4eb5-854c-c9ab97008422",
        "id": "7h0cdAH0QUDy"
      },
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "FHYKSt-0YiMz"
      },
      "execution_count": 140,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 141,
      "metadata": {
        "id": "tD4tWJS9YifQ"
      },
      "outputs": [],
      "source": [
        "SEP_df_1 = pd.read_csv(\"/content/sample_data/SEP_data.csv\", header = 0)\n",
        "# SEP_df_1 = SEP_df_1.drop([78, 79, 80, 81])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.neighbors import NearestNeighbors\n",
        "\n",
        "def get_knn_time_series(X, k):\n",
        "    # X: Feature matrix of original minority class samples\n",
        "    # k: Number of nearest neighbors to consider\n",
        "    \n",
        "    # Compute the k nearest neighbors using Euclidean distance\n",
        "    knn = NearestNeighbors(n_neighbors=k+1).fit(X)\n",
        "    distances, indices = knn.kneighbors(X)\n",
        "    \n",
        "    knn_time_series = []\n",
        "    \n",
        "    for i in range(len(X)):\n",
        "        # Get the k nearest neighbors for each sample\n",
        "        neighbors = indices[i, 1:]  # Exclude the sample itself\n",
        "        \n",
        "        # Get the time series data of the neighbors\n",
        "        neighbor_time_series = X.iloc[neighbors]\n",
        "        \n",
        "        knn_time_series.append(neighbor_time_series)\n",
        "    \n",
        "    # Convert knn_time_series to numpy array\n",
        "    knn_time_series = np.array(knn_time_series)\n",
        "    \n",
        "    return knn_time_series\n"
      ],
      "metadata": {
        "id": "16thfehOa89V"
      },
      "execution_count": 142,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "SMOTE_knn = get_knn_time_series(SEP_df_1, 2)\n",
        "h = SMOTE_knn[0]  # 2 nearest neighbors of the first sample\n",
        "SMOTE_knn_1 = pd.DataFrame(h[0])"
      ],
      "metadata": {
        "id": "K38dZm4FdDIl"
      },
      "execution_count": 143,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, SMOTE_knn_1, color = 'Orange')\n",
        "\n",
        "# Remove the top and right spines\n",
        "plt.gca().spines['top'].set_visible(False)\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['bottom'].set_visible(False)\n",
        "plt.gca().spines['left'].set_visible(False)\n",
        "\n",
        "# Remove the left and bottom ticks\n",
        "plt.gca().tick_params(left=False, bottom=False, top=False, right=False)\n",
        "\n",
        "# Set the ticks position to 'out'\n",
        "plt.gca().tick_params(axis='both', direction='out')\n",
        "\n",
        "\n",
        "# Remove the tick labels on both axes\n",
        "plt.gca().set_xticklabels([])\n",
        "plt.gca().set_yticklabels([])\n",
        "\n",
        "# plt.xlabel('Time', fontsize=10)\n",
        "# plt.ylabel('Proton flux P6', fontsize=10)\n",
        "# plt.title('Proton flux P6 causing 100 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "id": "Czzw2-7XeAKB",
        "outputId": "5b427f06-ab22-473b-d0b4-6a92850e0a9b"
      },
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-vRK2xBBfYNa"
      },
      "execution_count": 144,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, SMOTE_knn_1, color = 'Gold')\n",
        "plt.plot(my_indices, SMOTE_DA_ts, color = 'Orange')\n",
        "plt.plot(my_indices, original_ts, color = 'Red')\n",
        "\n",
        "# Remove the top and right spines\n",
        "plt.gca().spines['top'].set_visible(False)\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['bottom'].set_visible(False)\n",
        "plt.gca().spines['left'].set_visible(False)\n",
        "\n",
        "# Remove the left and bottom ticks\n",
        "plt.gca().tick_params(left=False, bottom=False, top=False, right=False)\n",
        "\n",
        "# Set the ticks position to 'out'\n",
        "plt.gca().tick_params(axis='both', direction='out')\n",
        "\n",
        "\n",
        "# Remove the tick labels on both axes\n",
        "plt.gca().set_xticklabels([])\n",
        "plt.gca().set_yticklabels([])\n",
        "\n",
        "# plt.xlabel('Time', fontsize=10)\n",
        "# plt.ylabel('Proton flux P6', fontsize=10)\n",
        "# plt.title('Proton flux P6 causing 100 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "id": "lne492MifYlV",
        "outputId": "2ac7ccbe-06fa-489c-a667-bc6130fed7e2"
      },
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Jfx0LRpDYQLJ"
      },
      "execution_count": 145,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "dEgNdlgWRW8v"
      },
      "execution_count": 145,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ADASYN"
      ],
      "metadata": {
        "id": "XEsuq5_JRXcH"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 146,
      "metadata": {
        "id": "x-iiNHCvUIh9"
      },
      "outputs": [],
      "source": [
        "from imblearn.over_sampling import ADASYN"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 147,
      "metadata": {
        "id": "DydyEwaJUIh-"
      },
      "outputs": [],
      "source": [
        "SEP_df_1 = pd.read_csv(\"/content/sample_data/SEP_data.csv\", header = 0)\n",
        "# SEP_df_1 = SEP_df_1.drop([78, 79, 80, 81])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 148,
      "metadata": {
        "id": "pNX-vz_9UIh-"
      },
      "outputs": [],
      "source": [
        "NSEP_df_156 = pd.read_csv(\"/content/sample_data/NSEP_data_156.csv\", header = 0)\n",
        "# NSEP_df_156 = NSEP_df_156.drop([78, 79, 80, 80])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 149,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "15159944-a1c6-4acf-eb9e-441b35585097",
        "id": "Y8Pqn5uYUIh-"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-149-4d9ede283d3d>:1: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  data = SEP_df_1.append(NSEP_df_156) # append the two SEP and NSEP dataframes\n"
          ]
        }
      ],
      "source": [
        "data = SEP_df_1.append(NSEP_df_156) # append the two SEP and NSEP dataframes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 150,
      "metadata": {
        "id": "81Ii7LqEUIh-"
      },
      "outputs": [],
      "source": [
        "data = data.reset_index(drop = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 151,
      "metadata": {
        "id": "rnkXw_p4UIh_"
      },
      "outputs": [],
      "source": [
        "NSEP_start_index = len(SEP_df_1) + 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 152,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "outputId": "a30980f1-5516-4f31-a8ff-826876697667",
        "id": "dSjtOoaAUIh_"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           0        1        2        3        4        5        6        7  \\\n",
              "0    0.00355  0.00312  0.00295  0.00356  0.00406  0.00288  0.00305  0.00336   \n",
              "1    0.00902  0.00851  0.00771  0.00828  0.00736  0.00716  0.00785  0.00793   \n",
              "2    0.00285  0.00284  0.00300  0.00288  0.00310  0.00264  0.00290  0.00255   \n",
              "3    0.00265  0.00303  0.00295  0.00336  0.00285  0.00303  0.00310  0.00269   \n",
              "4    0.00345  0.00308  0.00411  0.00346  0.00350  0.00375  0.00355  0.00360   \n",
              "..       ...      ...      ...      ...      ...      ...      ...      ...   \n",
              "274  0.00154  0.00210  0.00192  0.00220  0.00211  0.00195  0.00231  0.00185   \n",
              "275  0.00192  0.00200  0.00173  0.00215  0.00178  0.00205  0.00255  0.00195   \n",
              "276  0.00195  0.00192  0.00160  0.00202  0.00170  0.00197  0.00170  0.00231   \n",
              "277  0.00250  0.00185  0.00240  0.00265  0.00211  0.00195  0.00163  0.00226   \n",
              "278  0.00215  0.00231  0.00170  0.00154  0.00180  0.00221  0.00180  0.00168   \n",
              "\n",
              "           8        9  ...       51       52       53       54       55  \\\n",
              "0    0.00340  0.00303  ...  0.00325  0.00336  0.00305  0.00312  0.00300   \n",
              "1    0.00726  0.00984  ...  0.00690  0.00701  0.00697  0.00668  0.00697   \n",
              "2    0.00215  0.00231  ...  0.00275  0.00255  0.00300  0.00226  0.00280   \n",
              "3    0.00205  0.00346  ...  0.00310  0.00360  0.00235  0.00327  0.00260   \n",
              "4    0.00335  0.00351  ...  0.00355  0.00389  0.00406  0.00351  0.00335   \n",
              "..       ...      ...  ...      ...      ...      ...      ...      ...   \n",
              "274  0.00192  0.00216  ...  0.00178  0.00185  0.00197  0.00250  0.00274   \n",
              "275  0.00149  0.00215  ...  0.00221  0.00155  0.00226  0.00245  0.00216   \n",
              "276  0.00265  0.00183  ...  0.00160  0.00168  0.00235  0.00216  0.00205   \n",
              "277  0.00170  0.00235  ...  0.00173  0.00260  0.00192  0.00260  0.00207   \n",
              "278  0.00250  0.00139  ...  0.00235  0.00216  0.00195  0.00264  0.00245   \n",
              "\n",
              "          56       57       58       59  event  \n",
              "0    0.00327  0.00235  0.00288  0.00310    SEP  \n",
              "1    0.00789  0.00776  0.00706  0.00716    SEP  \n",
              "2    0.00298  0.00270  0.00274  0.00255    SEP  \n",
              "3    0.00255  0.00285  0.00298  0.00290    SEP  \n",
              "4    0.00356  0.00315  0.00327  0.00330    SEP  \n",
              "..       ...      ...      ...      ...    ...  \n",
              "274  0.00210  0.00183  0.00202  0.00230   NSEP  \n",
              "275  0.00220  0.00187  0.00220  0.00183   NSEP  \n",
              "276  0.00221  0.00185  0.00231  0.00185   NSEP  \n",
              "277  0.00197  0.00210  0.00226  0.00265   NSEP  \n",
              "278  0.00284  0.00260  0.00250  0.00275   NSEP  \n",
              "\n",
              "[279 rows x 61 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eb0bb277-ae49-4194-b03f-6c2363c45db4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>51</th>\n",
              "      <th>52</th>\n",
              "      <th>53</th>\n",
              "      <th>54</th>\n",
              "      <th>55</th>\n",
              "      <th>56</th>\n",
              "      <th>57</th>\n",
              "      <th>58</th>\n",
              "      <th>59</th>\n",
              "      <th>event</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.00355</td>\n",
              "      <td>0.00312</td>\n",
              "      <td>0.00295</td>\n",
              "      <td>0.00356</td>\n",
              "      <td>0.00406</td>\n",
              "      <td>0.00288</td>\n",
              "      <td>0.00305</td>\n",
              "      <td>0.00336</td>\n",
              "      <td>0.00340</td>\n",
              "      <td>0.00303</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00325</td>\n",
              "      <td>0.00336</td>\n",
              "      <td>0.00305</td>\n",
              "      <td>0.00312</td>\n",
              "      <td>0.00300</td>\n",
              "      <td>0.00327</td>\n",
              "      <td>0.00235</td>\n",
              "      <td>0.00288</td>\n",
              "      <td>0.00310</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.00902</td>\n",
              "      <td>0.00851</td>\n",
              "      <td>0.00771</td>\n",
              "      <td>0.00828</td>\n",
              "      <td>0.00736</td>\n",
              "      <td>0.00716</td>\n",
              "      <td>0.00785</td>\n",
              "      <td>0.00793</td>\n",
              "      <td>0.00726</td>\n",
              "      <td>0.00984</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00690</td>\n",
              "      <td>0.00701</td>\n",
              "      <td>0.00697</td>\n",
              "      <td>0.00668</td>\n",
              "      <td>0.00697</td>\n",
              "      <td>0.00789</td>\n",
              "      <td>0.00776</td>\n",
              "      <td>0.00706</td>\n",
              "      <td>0.00716</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.00285</td>\n",
              "      <td>0.00284</td>\n",
              "      <td>0.00300</td>\n",
              "      <td>0.00288</td>\n",
              "      <td>0.00310</td>\n",
              "      <td>0.00264</td>\n",
              "      <td>0.00290</td>\n",
              "      <td>0.00255</td>\n",
              "      <td>0.00215</td>\n",
              "      <td>0.00231</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00275</td>\n",
              "      <td>0.00255</td>\n",
              "      <td>0.00300</td>\n",
              "      <td>0.00226</td>\n",
              "      <td>0.00280</td>\n",
              "      <td>0.00298</td>\n",
              "      <td>0.00270</td>\n",
              "      <td>0.00274</td>\n",
              "      <td>0.00255</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.00265</td>\n",
              "      <td>0.00303</td>\n",
              "      <td>0.00295</td>\n",
              "      <td>0.00336</td>\n",
              "      <td>0.00285</td>\n",
              "      <td>0.00303</td>\n",
              "      <td>0.00310</td>\n",
              "      <td>0.00269</td>\n",
              "      <td>0.00205</td>\n",
              "      <td>0.00346</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00310</td>\n",
              "      <td>0.00360</td>\n",
              "      <td>0.00235</td>\n",
              "      <td>0.00327</td>\n",
              "      <td>0.00260</td>\n",
              "      <td>0.00255</td>\n",
              "      <td>0.00285</td>\n",
              "      <td>0.00298</td>\n",
              "      <td>0.00290</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.00345</td>\n",
              "      <td>0.00308</td>\n",
              "      <td>0.00411</td>\n",
              "      <td>0.00346</td>\n",
              "      <td>0.00350</td>\n",
              "      <td>0.00375</td>\n",
              "      <td>0.00355</td>\n",
              "      <td>0.00360</td>\n",
              "      <td>0.00335</td>\n",
              "      <td>0.00351</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00355</td>\n",
              "      <td>0.00389</td>\n",
              "      <td>0.00406</td>\n",
              "      <td>0.00351</td>\n",
              "      <td>0.00335</td>\n",
              "      <td>0.00356</td>\n",
              "      <td>0.00315</td>\n",
              "      <td>0.00327</td>\n",
              "      <td>0.00330</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>274</th>\n",
              "      <td>0.00154</td>\n",
              "      <td>0.00210</td>\n",
              "      <td>0.00192</td>\n",
              "      <td>0.00220</td>\n",
              "      <td>0.00211</td>\n",
              "      <td>0.00195</td>\n",
              "      <td>0.00231</td>\n",
              "      <td>0.00185</td>\n",
              "      <td>0.00192</td>\n",
              "      <td>0.00216</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00178</td>\n",
              "      <td>0.00185</td>\n",
              "      <td>0.00197</td>\n",
              "      <td>0.00250</td>\n",
              "      <td>0.00274</td>\n",
              "      <td>0.00210</td>\n",
              "      <td>0.00183</td>\n",
              "      <td>0.00202</td>\n",
              "      <td>0.00230</td>\n",
              "      <td>NSEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>275</th>\n",
              "      <td>0.00192</td>\n",
              "      <td>0.00200</td>\n",
              "      <td>0.00173</td>\n",
              "      <td>0.00215</td>\n",
              "      <td>0.00178</td>\n",
              "      <td>0.00205</td>\n",
              "      <td>0.00255</td>\n",
              "      <td>0.00195</td>\n",
              "      <td>0.00149</td>\n",
              "      <td>0.00215</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00221</td>\n",
              "      <td>0.00155</td>\n",
              "      <td>0.00226</td>\n",
              "      <td>0.00245</td>\n",
              "      <td>0.00216</td>\n",
              "      <td>0.00220</td>\n",
              "      <td>0.00187</td>\n",
              "      <td>0.00220</td>\n",
              "      <td>0.00183</td>\n",
              "      <td>NSEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>276</th>\n",
              "      <td>0.00195</td>\n",
              "      <td>0.00192</td>\n",
              "      <td>0.00160</td>\n",
              "      <td>0.00202</td>\n",
              "      <td>0.00170</td>\n",
              "      <td>0.00197</td>\n",
              "      <td>0.00170</td>\n",
              "      <td>0.00231</td>\n",
              "      <td>0.00265</td>\n",
              "      <td>0.00183</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00160</td>\n",
              "      <td>0.00168</td>\n",
              "      <td>0.00235</td>\n",
              "      <td>0.00216</td>\n",
              "      <td>0.00205</td>\n",
              "      <td>0.00221</td>\n",
              "      <td>0.00185</td>\n",
              "      <td>0.00231</td>\n",
              "      <td>0.00185</td>\n",
              "      <td>NSEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>277</th>\n",
              "      <td>0.00250</td>\n",
              "      <td>0.00185</td>\n",
              "      <td>0.00240</td>\n",
              "      <td>0.00265</td>\n",
              "      <td>0.00211</td>\n",
              "      <td>0.00195</td>\n",
              "      <td>0.00163</td>\n",
              "      <td>0.00226</td>\n",
              "      <td>0.00170</td>\n",
              "      <td>0.00235</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00173</td>\n",
              "      <td>0.00260</td>\n",
              "      <td>0.00192</td>\n",
              "      <td>0.00260</td>\n",
              "      <td>0.00207</td>\n",
              "      <td>0.00197</td>\n",
              "      <td>0.00210</td>\n",
              "      <td>0.00226</td>\n",
              "      <td>0.00265</td>\n",
              "      <td>NSEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>278</th>\n",
              "      <td>0.00215</td>\n",
              "      <td>0.00231</td>\n",
              "      <td>0.00170</td>\n",
              "      <td>0.00154</td>\n",
              "      <td>0.00180</td>\n",
              "      <td>0.00221</td>\n",
              "      <td>0.00180</td>\n",
              "      <td>0.00168</td>\n",
              "      <td>0.00250</td>\n",
              "      <td>0.00139</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00235</td>\n",
              "      <td>0.00216</td>\n",
              "      <td>0.00195</td>\n",
              "      <td>0.00264</td>\n",
              "      <td>0.00245</td>\n",
              "      <td>0.00284</td>\n",
              "      <td>0.00260</td>\n",
              "      <td>0.00250</td>\n",
              "      <td>0.00275</td>\n",
              "      <td>NSEP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>279 rows Ã— 61 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb0bb277-ae49-4194-b03f-6c2363c45db4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-eb0bb277-ae49-4194-b03f-6c2363c45db4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-eb0bb277-ae49-4194-b03f-6c2363c45db4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 152
        }
      ],
      "source": [
        "data['event'] = 'SEP'\n",
        "data.loc[NSEP_start_index:,['event']] = 'NSEP'\n",
        "my_data_all = data\n",
        "my_data_all"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "oversample = ADASYN(random_state = 42)\n",
        "X, y = oversample.fit_resample(my_data_all.iloc[:, 0:60], my_data_all.iloc[:, -1])"
      ],
      "metadata": {
        "id": "miSqav-kUIh_"
      },
      "execution_count": 153,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# y[234:] = 'Synthetic SEP'\n",
        "# y\n",
        "\n",
        "y[279:] = 'Synthetic SEP'\n",
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9373445b-b3fa-4016-86a8-7f85e7e3059e",
        "id": "mX7V3y4oUIh_"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0                SEP\n",
              "1                SEP\n",
              "2                SEP\n",
              "3                SEP\n",
              "4                SEP\n",
              "           ...      \n",
              "360    Synthetic SEP\n",
              "361    Synthetic SEP\n",
              "362    Synthetic SEP\n",
              "363    Synthetic SEP\n",
              "364    Synthetic SEP\n",
              "Name: event, Length: 365, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 154
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "out = X.copy()\n",
        "out['event'] = y\n",
        "out"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "outputId": "a00dc1bd-a25b-470d-ae8e-d84410210420",
        "id": "gBCFN6lKUIh_"
      },
      "execution_count": 155,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            0         1         2         3         4         5         6  \\\n",
              "0    0.003550  0.003120  0.002950  0.003560  0.004060  0.002880  0.003050   \n",
              "1    0.009020  0.008510  0.007710  0.008280  0.007360  0.007160  0.007850   \n",
              "2    0.002850  0.002840  0.003000  0.002880  0.003100  0.002640  0.002900   \n",
              "3    0.002650  0.003030  0.002950  0.003360  0.002850  0.003030  0.003100   \n",
              "4    0.003450  0.003080  0.004110  0.003460  0.003500  0.003750  0.003550   \n",
              "..        ...       ...       ...       ...       ...       ...       ...   \n",
              "360  0.021237  0.020665  0.019563  0.018682  0.018889  0.018972  0.018660   \n",
              "361  0.002506  0.002791  0.003019  0.002643  0.002630  0.003013  0.002798   \n",
              "362  0.002745  0.003530  0.003655  0.003194  0.003268  0.004079  0.004248   \n",
              "363  0.003522  0.003012  0.004087  0.003475  0.003598  0.003634  0.003242   \n",
              "364  0.003558  0.003317  0.002857  0.003605  0.003000  0.003551  0.003641   \n",
              "\n",
              "            7         8         9  ...        51        52        53  \\\n",
              "0    0.003360  0.003400  0.003030  ...  0.003250  0.003360  0.003050   \n",
              "1    0.007930  0.007260  0.009840  ...  0.006900  0.007010  0.006970   \n",
              "2    0.002550  0.002150  0.002310  ...  0.002750  0.002550  0.003000   \n",
              "3    0.002690  0.002050  0.003460  ...  0.003100  0.003600  0.002350   \n",
              "4    0.003600  0.003350  0.003510  ...  0.003550  0.003890  0.004060   \n",
              "..        ...       ...       ...  ...       ...       ...       ...   \n",
              "360  0.020261  0.019162  0.019628  ...  0.018008  0.018904  0.016874   \n",
              "361  0.003374  0.003386  0.003142  ...  0.002914  0.003361  0.002445   \n",
              "362  0.003569  0.003370  0.003444  ...  0.003639  0.003725  0.002458   \n",
              "363  0.003440  0.003698  0.003551  ...  0.003796  0.003997  0.003578   \n",
              "364  0.003829  0.003503  0.003173  ...  0.003641  0.003567  0.003297   \n",
              "\n",
              "           54        55        56        57        58        59          event  \n",
              "0    0.003120  0.003000  0.003270  0.002350  0.002880  0.003100            SEP  \n",
              "1    0.006680  0.006970  0.007890  0.007760  0.007060  0.007160            SEP  \n",
              "2    0.002260  0.002800  0.002980  0.002700  0.002740  0.002550            SEP  \n",
              "3    0.003270  0.002600  0.002550  0.002850  0.002980  0.002900            SEP  \n",
              "4    0.003510  0.003350  0.003560  0.003150  0.003270  0.003300            SEP  \n",
              "..        ...       ...       ...       ...       ...       ...            ...  \n",
              "360  0.017637  0.016999  0.017880  0.015570  0.016510  0.016894  Synthetic SEP  \n",
              "361  0.002553  0.003051  0.003380  0.002540  0.002606  0.002362  Synthetic SEP  \n",
              "362  0.003298  0.003152  0.003627  0.003204  0.002693  0.002570  Synthetic SEP  \n",
              "363  0.003793  0.003386  0.003870  0.003444  0.003555  0.003483  Synthetic SEP  \n",
              "364  0.003356  0.004449  0.003874  0.003904  0.003598  0.002907  Synthetic SEP  \n",
              "\n",
              "[365 rows x 61 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-068e1bdf-6137-490a-b9fe-b12b0d39b388\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>51</th>\n",
              "      <th>52</th>\n",
              "      <th>53</th>\n",
              "      <th>54</th>\n",
              "      <th>55</th>\n",
              "      <th>56</th>\n",
              "      <th>57</th>\n",
              "      <th>58</th>\n",
              "      <th>59</th>\n",
              "      <th>event</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.003550</td>\n",
              "      <td>0.003120</td>\n",
              "      <td>0.002950</td>\n",
              "      <td>0.003560</td>\n",
              "      <td>0.004060</td>\n",
              "      <td>0.002880</td>\n",
              "      <td>0.003050</td>\n",
              "      <td>0.003360</td>\n",
              "      <td>0.003400</td>\n",
              "      <td>0.003030</td>\n",
              "      <td>...</td>\n",
              "      <td>0.003250</td>\n",
              "      <td>0.003360</td>\n",
              "      <td>0.003050</td>\n",
              "      <td>0.003120</td>\n",
              "      <td>0.003000</td>\n",
              "      <td>0.003270</td>\n",
              "      <td>0.002350</td>\n",
              "      <td>0.002880</td>\n",
              "      <td>0.003100</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.009020</td>\n",
              "      <td>0.008510</td>\n",
              "      <td>0.007710</td>\n",
              "      <td>0.008280</td>\n",
              "      <td>0.007360</td>\n",
              "      <td>0.007160</td>\n",
              "      <td>0.007850</td>\n",
              "      <td>0.007930</td>\n",
              "      <td>0.007260</td>\n",
              "      <td>0.009840</td>\n",
              "      <td>...</td>\n",
              "      <td>0.006900</td>\n",
              "      <td>0.007010</td>\n",
              "      <td>0.006970</td>\n",
              "      <td>0.006680</td>\n",
              "      <td>0.006970</td>\n",
              "      <td>0.007890</td>\n",
              "      <td>0.007760</td>\n",
              "      <td>0.007060</td>\n",
              "      <td>0.007160</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.002850</td>\n",
              "      <td>0.002840</td>\n",
              "      <td>0.003000</td>\n",
              "      <td>0.002880</td>\n",
              "      <td>0.003100</td>\n",
              "      <td>0.002640</td>\n",
              "      <td>0.002900</td>\n",
              "      <td>0.002550</td>\n",
              "      <td>0.002150</td>\n",
              "      <td>0.002310</td>\n",
              "      <td>...</td>\n",
              "      <td>0.002750</td>\n",
              "      <td>0.002550</td>\n",
              "      <td>0.003000</td>\n",
              "      <td>0.002260</td>\n",
              "      <td>0.002800</td>\n",
              "      <td>0.002980</td>\n",
              "      <td>0.002700</td>\n",
              "      <td>0.002740</td>\n",
              "      <td>0.002550</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.002650</td>\n",
              "      <td>0.003030</td>\n",
              "      <td>0.002950</td>\n",
              "      <td>0.003360</td>\n",
              "      <td>0.002850</td>\n",
              "      <td>0.003030</td>\n",
              "      <td>0.003100</td>\n",
              "      <td>0.002690</td>\n",
              "      <td>0.002050</td>\n",
              "      <td>0.003460</td>\n",
              "      <td>...</td>\n",
              "      <td>0.003100</td>\n",
              "      <td>0.003600</td>\n",
              "      <td>0.002350</td>\n",
              "      <td>0.003270</td>\n",
              "      <td>0.002600</td>\n",
              "      <td>0.002550</td>\n",
              "      <td>0.002850</td>\n",
              "      <td>0.002980</td>\n",
              "      <td>0.002900</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.003450</td>\n",
              "      <td>0.003080</td>\n",
              "      <td>0.004110</td>\n",
              "      <td>0.003460</td>\n",
              "      <td>0.003500</td>\n",
              "      <td>0.003750</td>\n",
              "      <td>0.003550</td>\n",
              "      <td>0.003600</td>\n",
              "      <td>0.003350</td>\n",
              "      <td>0.003510</td>\n",
              "      <td>...</td>\n",
              "      <td>0.003550</td>\n",
              "      <td>0.003890</td>\n",
              "      <td>0.004060</td>\n",
              "      <td>0.003510</td>\n",
              "      <td>0.003350</td>\n",
              "      <td>0.003560</td>\n",
              "      <td>0.003150</td>\n",
              "      <td>0.003270</td>\n",
              "      <td>0.003300</td>\n",
              "      <td>SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>360</th>\n",
              "      <td>0.021237</td>\n",
              "      <td>0.020665</td>\n",
              "      <td>0.019563</td>\n",
              "      <td>0.018682</td>\n",
              "      <td>0.018889</td>\n",
              "      <td>0.018972</td>\n",
              "      <td>0.018660</td>\n",
              "      <td>0.020261</td>\n",
              "      <td>0.019162</td>\n",
              "      <td>0.019628</td>\n",
              "      <td>...</td>\n",
              "      <td>0.018008</td>\n",
              "      <td>0.018904</td>\n",
              "      <td>0.016874</td>\n",
              "      <td>0.017637</td>\n",
              "      <td>0.016999</td>\n",
              "      <td>0.017880</td>\n",
              "      <td>0.015570</td>\n",
              "      <td>0.016510</td>\n",
              "      <td>0.016894</td>\n",
              "      <td>Synthetic SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>361</th>\n",
              "      <td>0.002506</td>\n",
              "      <td>0.002791</td>\n",
              "      <td>0.003019</td>\n",
              "      <td>0.002643</td>\n",
              "      <td>0.002630</td>\n",
              "      <td>0.003013</td>\n",
              "      <td>0.002798</td>\n",
              "      <td>0.003374</td>\n",
              "      <td>0.003386</td>\n",
              "      <td>0.003142</td>\n",
              "      <td>...</td>\n",
              "      <td>0.002914</td>\n",
              "      <td>0.003361</td>\n",
              "      <td>0.002445</td>\n",
              "      <td>0.002553</td>\n",
              "      <td>0.003051</td>\n",
              "      <td>0.003380</td>\n",
              "      <td>0.002540</td>\n",
              "      <td>0.002606</td>\n",
              "      <td>0.002362</td>\n",
              "      <td>Synthetic SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362</th>\n",
              "      <td>0.002745</td>\n",
              "      <td>0.003530</td>\n",
              "      <td>0.003655</td>\n",
              "      <td>0.003194</td>\n",
              "      <td>0.003268</td>\n",
              "      <td>0.004079</td>\n",
              "      <td>0.004248</td>\n",
              "      <td>0.003569</td>\n",
              "      <td>0.003370</td>\n",
              "      <td>0.003444</td>\n",
              "      <td>...</td>\n",
              "      <td>0.003639</td>\n",
              "      <td>0.003725</td>\n",
              "      <td>0.002458</td>\n",
              "      <td>0.003298</td>\n",
              "      <td>0.003152</td>\n",
              "      <td>0.003627</td>\n",
              "      <td>0.003204</td>\n",
              "      <td>0.002693</td>\n",
              "      <td>0.002570</td>\n",
              "      <td>Synthetic SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>363</th>\n",
              "      <td>0.003522</td>\n",
              "      <td>0.003012</td>\n",
              "      <td>0.004087</td>\n",
              "      <td>0.003475</td>\n",
              "      <td>0.003598</td>\n",
              "      <td>0.003634</td>\n",
              "      <td>0.003242</td>\n",
              "      <td>0.003440</td>\n",
              "      <td>0.003698</td>\n",
              "      <td>0.003551</td>\n",
              "      <td>...</td>\n",
              "      <td>0.003796</td>\n",
              "      <td>0.003997</td>\n",
              "      <td>0.003578</td>\n",
              "      <td>0.003793</td>\n",
              "      <td>0.003386</td>\n",
              "      <td>0.003870</td>\n",
              "      <td>0.003444</td>\n",
              "      <td>0.003555</td>\n",
              "      <td>0.003483</td>\n",
              "      <td>Synthetic SEP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>364</th>\n",
              "      <td>0.003558</td>\n",
              "      <td>0.003317</td>\n",
              "      <td>0.002857</td>\n",
              "      <td>0.003605</td>\n",
              "      <td>0.003000</td>\n",
              "      <td>0.003551</td>\n",
              "      <td>0.003641</td>\n",
              "      <td>0.003829</td>\n",
              "      <td>0.003503</td>\n",
              "      <td>0.003173</td>\n",
              "      <td>...</td>\n",
              "      <td>0.003641</td>\n",
              "      <td>0.003567</td>\n",
              "      <td>0.003297</td>\n",
              "      <td>0.003356</td>\n",
              "      <td>0.004449</td>\n",
              "      <td>0.003874</td>\n",
              "      <td>0.003904</td>\n",
              "      <td>0.003598</td>\n",
              "      <td>0.002907</td>\n",
              "      <td>Synthetic SEP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>365 rows Ã— 61 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-068e1bdf-6137-490a-b9fe-b12b0d39b388')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-068e1bdf-6137-490a-b9fe-b12b0d39b388 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-068e1bdf-6137-490a-b9fe-b12b0d39b388');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 155
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "XX = out.iloc[:, 0:60]"
      ],
      "metadata": {
        "id": "S4rJ3UuqUIh_"
      },
      "execution_count": 156,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# augmented_data = augmented_data.drop(columns=['event'], axis=1)"
      ],
      "metadata": {
        "id": "9V8PWyrFUIiA"
      },
      "execution_count": 157,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "temp_ts_ADASYN = XX.iloc[279]\n",
        "ADASYN_DA_ts = temp_ts_ADASYN.to_frame()"
      ],
      "metadata": {
        "id": "VjAH7p2hUIiA"
      },
      "execution_count": 158,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, SMOTE_DA_ts, color = 'Gold')\n",
        "\n",
        "# Remove the top and right spines\n",
        "plt.gca().spines['top'].set_visible(False)\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['bottom'].set_visible(False)\n",
        "plt.gca().spines['left'].set_visible(False)\n",
        "\n",
        "# Remove the left and bottom ticks\n",
        "plt.gca().tick_params(left=False, bottom=False, top=False, right=False)\n",
        "\n",
        "# Set the ticks position to 'out'\n",
        "plt.gca().tick_params(axis='both', direction='out')\n",
        "\n",
        "\n",
        "# Remove the tick labels on both axes\n",
        "plt.gca().set_xticklabels([])\n",
        "plt.gca().set_yticklabels([])\n",
        "\n",
        "# plt.xlabel('Time', fontsize=10)\n",
        "# plt.ylabel('Proton flux P6', fontsize=10)\n",
        "# plt.title('Proton flux P6 causing 100 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "f4fa1a3f-0ba8-48f3-b9eb-abe57c180445",
        "id": "OYcJr4jOUIiA"
      },
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "dMn5JN5OUUOA"
      },
      "execution_count": 159,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "KAzyA7i2UWeM"
      },
      "execution_count": 159,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 160,
      "metadata": {
        "id": "4n1Ek6kmgGy-"
      },
      "outputs": [],
      "source": [
        "SEP_df_1 = pd.read_csv(\"/content/sample_data/SEP_data.csv\", header = 0)\n",
        "# SEP_df_1 = SEP_df_1.drop([78, 79, 80, 81])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.neighbors import NearestNeighbors\n",
        "\n",
        "def get_knn_time_series(X, k):\n",
        "    # X: Feature matrix of original minority class samples\n",
        "    # k: Number of nearest neighbors to consider\n",
        "    \n",
        "    # Compute the k nearest neighbors using Euclidean distance\n",
        "    knn = NearestNeighbors(n_neighbors=k+1).fit(X)\n",
        "    distances, indices = knn.kneighbors(X)\n",
        "    \n",
        "    knn_time_series = []\n",
        "    \n",
        "    for i in range(len(X)):\n",
        "        # Get the k nearest neighbors for each sample\n",
        "        neighbors = indices[i, 1:]  # Exclude the sample itself\n",
        "        \n",
        "        # Get the time series data of the neighbors\n",
        "        neighbor_time_series = X.iloc[neighbors]\n",
        "        \n",
        "        knn_time_series.append(neighbor_time_series)\n",
        "    \n",
        "    # Convert knn_time_series to numpy array\n",
        "    knn_time_series = np.array(knn_time_series)\n",
        "    \n",
        "    return knn_time_series\n"
      ],
      "metadata": {
        "id": "-LKLaLjCgGzN"
      },
      "execution_count": 161,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ADASYN_knn = get_knn_time_series(SEP_df_1, 2)\n",
        "h = ADASYN_knn[0]  # 2 nearest neighbors of the first sample\n",
        "ADASYN_knn_1 = pd.DataFrame(h[0])"
      ],
      "metadata": {
        "id": "ShCM5-Z8gGzN"
      },
      "execution_count": 162,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, ADASYN_knn_1, color = 'Orange')\n",
        "\n",
        "# Remove the top and right spines\n",
        "plt.gca().spines['top'].set_visible(False)\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['bottom'].set_visible(False)\n",
        "plt.gca().spines['left'].set_visible(False)\n",
        "\n",
        "# Remove the left and bottom ticks\n",
        "plt.gca().tick_params(left=False, bottom=False, top=False, right=False)\n",
        "\n",
        "# Set the ticks position to 'out'\n",
        "plt.gca().tick_params(axis='both', direction='out')\n",
        "\n",
        "\n",
        "# Remove the tick labels on both axes\n",
        "plt.gca().set_xticklabels([])\n",
        "plt.gca().set_yticklabels([])\n",
        "\n",
        "# plt.xlabel('Time', fontsize=10)\n",
        "# plt.ylabel('Proton flux P6', fontsize=10)\n",
        "# plt.title('Proton flux P6 causing 100 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "dfb5ea4b-39c5-4506-a88e-b00c5cd88f90",
        "id": "VX214bGDgGzN"
      },
      "execution_count": 163,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "qUh67pm1gGzO"
      },
      "execution_count": 163,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Plot the data\n",
        "plt.figure(figsize=(12, 2))\n",
        "\n",
        "plt.plot(my_indices, ADASYN_knn_1, color = 'Gold')\n",
        "plt.plot(my_indices, ADASYN_DA_ts, color = 'Orange')\n",
        "plt.plot(my_indices, original_ts, color = 'Red')\n",
        "\n",
        "# Remove the top and right spines\n",
        "plt.gca().spines['top'].set_visible(False)\n",
        "plt.gca().spines['right'].set_visible(False)\n",
        "plt.gca().spines['bottom'].set_visible(False)\n",
        "plt.gca().spines['left'].set_visible(False)\n",
        "\n",
        "# Remove the left and bottom ticks\n",
        "plt.gca().tick_params(left=False, bottom=False, top=False, right=False)\n",
        "\n",
        "# Set the ticks position to 'out'\n",
        "plt.gca().tick_params(axis='both', direction='out')\n",
        "\n",
        "\n",
        "# Remove the tick labels on both axes\n",
        "plt.gca().set_xticklabels([])\n",
        "plt.gca().set_yticklabels([])\n",
        "\n",
        "# plt.xlabel('Time', fontsize=10)\n",
        "# plt.ylabel('Proton flux P6', fontsize=10)\n",
        "# plt.title('Proton flux P6 causing 100 MeV energy band SEP', fontsize=10)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "outputId": "7a4ac5e1-a678-4956-b8d0-fd52ecb6bac5",
        "id": "Bymyce8QgGzO"
      },
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "xyT_S85WgGzO"
      },
      "execution_count": 164,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hUZV0Wo6gGzO"
      },
      "execution_count": 164,
      "outputs": []
    }
  ]
}
